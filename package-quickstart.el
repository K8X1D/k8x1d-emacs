;;; Quickstart file to activate all packages at startup  -*- lexical-binding:t -*-
;; ¡¡ This file is autogenerated by `package-quickstart-refresh', DO NOT EDIT !!

(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/gntp-0.1/gntp-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/gntp-0.1/gntp-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'gntp-notify "gntp" "\
Send notification NAME with TITLE, TEXT, PRIORITY and ICON to SERVER:PORT.
PORT defaults to `gntp-server-port'

(fn NAME TITLE TEXT SERVER &optional PORT PRIORITY ICON)")
(register-definition-prefixes "gntp" '("gntp-"))


(provide 'gntp-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/log4e-0.3.3/log4e-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/log4e-0.3.3/log4e-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'log4e-mode "log4e" "\
Major mode for browsing a buffer made by log4e.

\\<log4e-mode-map>
\\{log4e-mode-map}

(fn)" t)
(autoload 'log4e:insert-start-log-quickly "log4e" "\
Insert logging statment for trace level log at start of current function/macro." t)
(register-definition-prefixes "log4e" '("log4e"))


(provide 'log4e-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/alert-1.3/alert-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/alert-1.3/alert-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'alert-add-rule "alert" "\
Programmatically add an alert configuration rule.

Normally, users should custoimze `alert-user-configuration'.
This facility is for module writers and users that need to do
things the Lisp way.

Here is a rule the author currently uses with ERC, so that the
fringe gets colored whenever people chat on BitlBee:

(alert-add-rule :status   \\='(buried visible idle)
                :severity \\='(moderate high urgent)
                :mode     \\='erc-mode
                :predicate
                #\\='(lambda (info)
                    (string-match (concat \"\\\\`[^&].*@BitlBee\\\\\\='\")
                                  (erc-format-target-and/or-network)))
                :persistent
                #\\='(lambda (info)
                    ;; If the buffer is buried, or the user has been
                    ;; idle for `alert-reveal-idle-time' seconds,
                    ;; make this alert persistent.  Normally, alerts
                    ;; become persistent after
                    ;; `alert-persist-idle-time' seconds.
                    (memq (plist-get info :status) \\='(buried idle)))
                :style \\='fringe
                :continue t)

(fn &key SEVERITY STATUS MODE CATEGORY TITLE MESSAGE PREDICATE ICON (STYLE alert-default-style) PERSISTENT CONTINUE NEVER-PERSIST APPEND)")
(autoload 'alert "alert" "\
Alert the user that something has happened.
MESSAGE is what the user will see.  You may also use keyword
arguments to specify additional details.  Here is a full example:

(alert \"This is a message\"
       :severity \\='high          ;; The default severity is `normal'
       :title \"Title\"           ;; An optional title
       :category \\='example       ;; A symbol to identify the message
       :mode \\='text-mode         ;; Normally determined automatically
       :buffer (current-buffer) ;; This is the default
       :data nil                ;; Unused by alert.el itself
       :persistent nil          ;; Force the alert to be persistent;
                                ;; it is best not to use this
       :never-persist nil       ;; Force this alert to never persist
       :id \\='my-id)              ;; Used to replace previous message of
                                ;; the same id in styles that support it
       :style \\='fringe)          ;; Force a given style to be used;
                                ;; this is only for debugging!

If no :title is given, the buffer-name of :buffer is used.  If
:buffer is nil, it is the current buffer at the point of call.

:data is an opaque value which modules can pass through to their
own styles if they wish.

Here are some more typical examples of usage:

  ;; This is the most basic form usage
  (alert \"This is an alert\")

  ;; You can adjust the severity for more important messages
  (alert \"This is an alert\" :severity \\='high)

  ;; Or decrease it for purely informative ones
  (alert \"This is an alert\" :severity \\='trivial)

  ;; Alerts can have optional titles.  Otherwise, the title is the
  ;; buffer-name of the (current-buffer) where the alert originated.
  (alert \"This is an alert\" :title \"My Alert\")

  ;; Further, alerts can have categories.  This allows users to
  ;; selectively filter on them.
  (alert \"This is an alert\" :title \"My Alert\"
         :category \\='some-category-or-other)

(fn MESSAGE &key (SEVERITY \\='normal) TITLE ICON CATEGORY BUFFER MODE DATA STYLE PERSISTENT NEVER-PERSIST ID)")
(register-definition-prefixes "alert" '("alert-" "x-urgen"))


(provide 'alert-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/org-pomodoro-2.1.0/org-pomodoro-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/org-pomodoro-2.1.0/org-pomodoro-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'org-pomodoro "org-pomodoro" "\
Start a new pomodoro or stop the current one.

When no timer is running for `org-pomodoro` a new pomodoro is started and
the current task is clocked in.  Otherwise EMACS will ask whether we´d like to
kill the current timer, this may be a break or a running pomodoro.

(fn &optional ARG)" t)
(register-definition-prefixes "org-pomodoro" '("org-pomodoro-"))



(register-definition-prefixes "org-pomodoro-pidgin" '("org-pom"))


(provide 'org-pomodoro-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/async-1.9.7/async-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/async-1.9.7/async-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'async-start-process "async" "\
Start the executable PROGRAM asynchronously named NAME.  See `async-start'.
PROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the
process object when done.  If FINISH-FUNC is nil, the future
object will return the process object when the program is
finished.  Set DEFAULT-DIRECTORY to change PROGRAM's current
working directory.

(fn NAME PROGRAM FINISH-FUNC &rest PROGRAM-ARGS)")
(autoload 'async-start "async" "\
Execute START-FUNC (often a lambda) in a subordinate Emacs process.
When done, the return value is passed to FINISH-FUNC.  Example:

    (async-start
       ;; What to do in the child process
       (lambda ()
         (message \"This is a test\")
         (sleep-for 3)
         222)

       ;; What to do when it finishes
       (lambda (result)
         (message \"Async process done, result should be 222: %s\"
                  result)))

If FINISH-FUNC is nil or missing, a future is returned that can
be inspected using `async-get', blocking until the value is
ready.  Example:

    (let ((proc (async-start
                   ;; What to do in the child process
                   (lambda ()
                     (message \"This is a test\")
                     (sleep-for 3)
                     222))))

        (message \"I'm going to do some work here\") ;; ....

        (message \"Waiting on async process, result should be 222: %s\"
                 (async-get proc)))

If you don't want to use a callback, and you don't care about any
return value from the child process, pass the `ignore' symbol as
the second argument (if you don't, and never call `async-get', it
will leave *emacs* process buffers hanging around):

    (async-start
     (lambda ()
       (delete-file \"a remote file on a slow link\" nil))
     \\='ignore)

Special case:
If the output of START-FUNC is a string with properties
e.g. (buffer-string) RESULT will be transformed in a list where the
car is the string itself (without props) and the cdr the rest of
properties, this allows using in FINISH-FUNC the string without
properties and then apply the properties in cdr to this string (if
needed).
Properties handling special objects like markers are returned as
list to allow restoring them later.
See <https://github.com/jwiegley/emacs-async/issues/145> for more infos.

Note: Even when FINISH-FUNC is present, a future is still
returned except that it yields no value (since the value is
passed to FINISH-FUNC).  Call `async-get' on such a future always
returns nil.  It can still be useful, however, as an argument to
`async-ready' or `async-wait'.

(fn START-FUNC &optional FINISH-FUNC)")
(register-definition-prefixes "async" '("async-"))



(autoload 'async-byte-recompile-directory "async-bytecomp" "\
Compile all *.el files in DIRECTORY asynchronously.
All *.elc files are systematically deleted before proceeding.

(fn DIRECTORY &optional QUIET)")
(defvar async-bytecomp-package-mode nil "\
Non-nil if Async-Bytecomp-Package mode is enabled.
See the `async-bytecomp-package-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `async-bytecomp-package-mode'.")
(custom-autoload 'async-bytecomp-package-mode "async-bytecomp" nil)
(autoload 'async-bytecomp-package-mode "async-bytecomp" "\
Byte compile asynchronously packages installed with package.el.

Async compilation of packages can be controlled by
`async-bytecomp-allowed-packages'.

This is a global minor mode.  If called interactively, toggle the
`Async-Bytecomp-Package mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='async-bytecomp-package-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'async-byte-compile-file "async-bytecomp" "\
Byte compile Lisp code FILE asynchronously.

Same as `byte-compile-file' but asynchronous.

(fn FILE)" t)
(register-definition-prefixes "async-bytecomp" '("async-"))



(register-definition-prefixes "async-test" '("async-test-"))



(defvar dired-async-mode nil "\
Non-nil if Dired-Async mode is enabled.
See the `dired-async-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dired-async-mode'.")
(custom-autoload 'dired-async-mode "dired-async" nil)
(autoload 'dired-async-mode "dired-async" "\
Do dired actions asynchronously.

This is a global minor mode.  If called interactively, toggle the
`Dired-Async mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dired-async-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'dired-async-do-copy "dired-async" "\
Run ‘dired-do-copy’ asynchronously.

(fn &optional ARG)" t)
(autoload 'dired-async-do-symlink "dired-async" "\
Run ‘dired-do-symlink’ asynchronously.

(fn &optional ARG)" t)
(autoload 'dired-async-do-hardlink "dired-async" "\
Run ‘dired-do-hardlink’ asynchronously.

(fn &optional ARG)" t)
(autoload 'dired-async-do-rename "dired-async" "\
Run ‘dired-do-rename’ asynchronously.

(fn &optional ARG)" t)
(register-definition-prefixes "dired-async" '("dired-async-"))



(register-definition-prefixes "smtpmail-async" '("async-smtpmail-"))


(provide 'async-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dash-2.19.1/dash-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dash-2.19.1/dash-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'dash-fontify-mode "dash" "\
Toggle fontification of Dash special variables.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

This is a minor mode.  If called interactively, toggle the
`Dash-Fontify mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `dash-fontify-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-dash-fontify-mode 'globalized-minor-mode t)
(defvar global-dash-fontify-mode nil "\
Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")
(custom-autoload 'global-dash-fontify-mode "dash" nil)
(autoload 'global-dash-fontify-mode "dash" "\
Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.

See `dash-fontify-mode' for more information on Dash-Fontify mode.

(fn &optional ARG)" t)
(autoload 'dash-register-info-lookup "dash" "\
Register the Dash Info manual with `info-lookup-symbol'.
This allows Dash symbols to be looked up with \\[info-lookup-symbol]." t)
(register-definition-prefixes "dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-juxt" "-keep" "-l" "-m" "-no" "-o" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-"))


(provide 'dash-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/s-1.13.0/s-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/s-1.13.0/s-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "s" '("s-"))


(provide 's-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/f-0.20.0/f-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/f-0.20.0/f-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "f" '("f-"))


(provide 'f-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/hl-todo-3.4.2/hl-todo-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/hl-todo-3.4.2/hl-todo-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'hl-todo-mode "hl-todo" "\
Highlight TODO and similar keywords in comments and strings.

This is a minor mode.  If called interactively, toggle the
`Hl-Todo mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `hl-todo-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-hl-todo-mode 'globalized-minor-mode t)
(defvar global-hl-todo-mode nil "\
Non-nil if Global Hl-Todo mode is enabled.
See the `global-hl-todo-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-hl-todo-mode'.")
(custom-autoload 'global-hl-todo-mode "hl-todo" nil)
(autoload 'global-hl-todo-mode "hl-todo" "\
Toggle Hl-Todo mode in all buffers.
With prefix ARG, enable Global Hl-Todo mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Hl-Todo mode is enabled in all buffers where
`hl-todo--turn-on-mode-if-desired' would do it.

See `hl-todo-mode' for more information on Hl-Todo mode.

(fn &optional ARG)" t)
(autoload 'hl-todo-next "hl-todo" "\
Jump to the next TODO or similar keyword.
The prefix argument ARG specifies how many keywords to move.
A negative argument means move backward that many keywords.

(fn ARG)" t)
(autoload 'hl-todo-previous "hl-todo" "\
Jump to the previous TODO or similar keyword.
The prefix argument ARG specifies how many keywords to move.
A negative argument means move forward that many keywords.

(fn ARG)" t)
(autoload 'hl-todo-occur "hl-todo" "\
Use `occur' to find all TODO or similar keywords.
This actually finds a superset of the highlighted keywords,
because it uses a regexp instead of a more sophisticated
matcher.  It also finds occurrences that are not within a
string or comment." t)
(autoload 'hl-todo-insert "hl-todo" "\
Insert TODO or similar keyword.
If point is not inside a string or comment, then insert a new
comment.  If point is at the end of the line, then insert the
comment there, otherwise insert it as a new line before the
current line.

(fn KEYWORD)" t)
(register-definition-prefixes "hl-todo" '("hl-todo-"))


(provide 'hl-todo-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/transient-0.3.7/transient-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/transient-0.3.7/transient-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'transient-insert-suffix "transient" "\
Insert a SUFFIX into PREFIX before LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)")
(function-put 'transient-insert-suffix 'lisp-indent-function 'defun)
(autoload 'transient-append-suffix "transient" "\
Insert a SUFFIX into PREFIX after LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)")
(function-put 'transient-append-suffix 'lisp-indent-function 'defun)
(autoload 'transient-replace-suffix "transient" "\
Replace the suffix at LOC in PREFIX with SUFFIX.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)")
(function-put 'transient-replace-suffix 'lisp-indent-function 'defun)
(autoload 'transient-remove-suffix "transient" "\
Remove the suffix or group at LOC in PREFIX.
PREFIX is a prefix command, a symbol.
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC)")
(function-put 'transient-remove-suffix 'lisp-indent-function 'defun)
(register-definition-prefixes "transient" '("magit--fit-window-to-buffer" "transient-"))


(provide 'transient-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/with-editor-3.2.0/with-editor-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/with-editor-3.2.0/with-editor-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'with-editor-export-editor "with-editor" "\
Teach subsequent commands to use current Emacs instance as editor.

Set and export the environment variable ENVVAR, by default
\"EDITOR\".  The value is automatically generated to teach
commands to use the current Emacs instance as \"the editor\".

This works in `shell-mode', `term-mode', `eshell-mode' and
`vterm'.

(fn &optional (ENVVAR \"EDITOR\"))" t)
(autoload 'with-editor-export-git-editor "with-editor" "\
Like `with-editor-export-editor' but always set `$GIT_EDITOR'." t)
(autoload 'with-editor-export-hg-editor "with-editor" "\
Like `with-editor-export-editor' but always set `$HG_EDITOR'." t)
(defvar shell-command-with-editor-mode nil "\
Non-nil if Shell-Command-With-Editor mode is enabled.
See the `shell-command-with-editor-mode' command
for a description of this minor mode.")
(custom-autoload 'shell-command-with-editor-mode "with-editor" nil)
(autoload 'shell-command-with-editor-mode "with-editor" "\
Teach `shell-command' to use current Emacs instance as editor.

Teach `shell-command', and all commands that ultimately call that
command, to use the current Emacs instance as editor by executing
\"EDITOR=CLIENT COMMAND&\" instead of just \"COMMAND&\".

CLIENT is automatically generated; EDITOR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming no other variable overrides the effect of \"$EDITOR\".
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Alternatively you can use the `with-editor-async-shell-command',
which also allows the use of another variable instead of
\"EDITOR\".

This is a global minor mode.  If called interactively, toggle the
`Shell-Command-With-Editor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='shell-command-with-editor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'with-editor-async-shell-command "with-editor" "\
Like `async-shell-command' but with `$EDITOR' set.

Execute string \"ENVVAR=CLIENT COMMAND\" in an inferior shell;
display output, if any.  With a prefix argument prompt for an
environment variable, otherwise the default \"EDITOR\" variable
is used.  With a negative prefix argument additionally insert
the COMMAND's output at point.

CLIENT is automatically generated; ENVVAR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming it respects ENVVAR as an \"EDITOR\"-like variable.
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Also see `async-shell-command' and `shell-command'.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t)
(autoload 'with-editor-shell-command "with-editor" "\
Like `shell-command' or `with-editor-async-shell-command'.
If COMMAND ends with \"&\" behave like the latter,
else like the former.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t)
(register-definition-prefixes "with-editor" '("server-" "shell-command--shell-command-with-editor-mode" "start-file-process--with-editor-process-filter" "with-editor"))


(provide 'with-editor-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/git-commit-3.3.0/git-commit-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/git-commit-3.3.0/git-commit-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(put 'git-commit-major-mode 'safe-local-variable
    (lambda (val)
      (memq val '(text-mode
                  markdown-mode
                  org-mode
                  fundamental-mode
                  git-commit-elisp-text-mode))))
(register-definition-prefixes "git-commit" '("git-commit-" "global-git-commit-mode"))


(provide 'git-commit-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/magit-section-3.3.0/magit-section-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/magit-section-3.3.0/magit-section-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "magit-section" '("isearch-clean-overlays@magit-mode" "magit-"))


(provide 'magit-section-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/magit-3.3.0/magit-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/magit-3.3.0/magit-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'git-rebase-current-line "git-rebase" "\
Parse current line into a `git-rebase-action' instance.
If the current line isn't recognized as a rebase line, an
instance with all nil values is returned.")
(autoload 'git-rebase-mode "git-rebase" "\
Major mode for editing of a Git rebase file.

Rebase files are generated when you run 'git rebase -i' or run
`magit-interactive-rebase'.  They describe how Git should perform
the rebase.  See the documentation for git-rebase (e.g., by
running 'man git-rebase' at the command line) for details.

(fn)" t)
(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")
(add-to-list 'auto-mode-alist (cons git-rebase-filename-regexp 'git-rebase-mode))
(register-definition-prefixes "git-rebase" '("git-rebase-"))



(define-obsolete-variable-alias 'global-magit-file-mode 'magit-define-global-key-bindings "\
Magit 3.0.0")
(defvar magit-define-global-key-bindings t "\
Whether to bind some Magit commands in the global keymap.

If this variable is non-nil, then the following bindings may
be added to the global keymap.  The default is t.

key             binding
---             -------
C-x g           magit-status
C-x M-g         magit-dispatch
C-c M-g         magit-file-dispatch

These bindings may be added when `after-init-hook' is run.
Each binding is added if and only if at that time no other key
is bound to the same command and no other command is bound to
the same key.  In other words we try to avoid adding bindings
that are unnecessary, as well as bindings that conflict with
other bindings.

Adding the above bindings is delayed until `after-init-hook'
is called to allow users to set the variable anywhere in their
init file (without having to make sure to do so before `magit'
is loaded or autoloaded) and to increase the likelihood that
all the potentially conflicting user bindings have already
been added.

To set this variable use either `setq' or the Custom interface.
Do not use the function `customize-set-variable' because doing
that would cause Magit to be loaded immediately when that form
is evaluated (this differs from `custom-set-variables', which
doesn't load the libraries that define the customized variables).

Setting this variable to nil has no effect if that is done after
the key bindings have already been added.

We recommend that you bind \"C-c g\" instead of \"C-c M-g\" to
`magit-file-dispatch'.  The former is a much better binding
but the \"C-c <letter>\" namespace is strictly reserved for
users; preventing Magit from using it by default.

Also see info node `(magit)Commands for Buffers Visiting Files'.")
(custom-autoload 'magit-define-global-key-bindings "magit" t)
(defun magit-maybe-define-global-key-bindings nil (when magit-define-global-key-bindings (let ((map (current-global-map))) (dolist (elt '(("C-x g" . magit-status) ("C-x M-g" . magit-dispatch) ("C-c M-g" . magit-file-dispatch))) (let ((key (kbd (car elt))) (def (cdr elt))) (unless (or (lookup-key map key) (where-is-internal def (make-sparse-keymap) t)) (define-key map key def)))))))
(if after-init-time (magit-maybe-define-global-key-bindings) (add-hook 'after-init-hook 'magit-maybe-define-global-key-bindings t))
 (autoload 'magit-dispatch "magit" nil t)
 (autoload 'magit-run "magit" nil t)
(autoload 'magit-git-command "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

With a prefix argument COMMAND is run in the top-level directory
of the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t)
(autoload 'magit-git-command-topdir "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

COMMAND is run in the top-level directory of the current
working tree.

(fn COMMAND)" t)
(autoload 'magit-shell-command "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  With a
prefix argument COMMAND is run in the top-level directory of
the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t)
(autoload 'magit-shell-command-topdir "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  COMMAND
is run in the top-level directory of the current working tree.

(fn COMMAND)" t)
(autoload 'magit-version "magit" "\
Return the version of Magit currently in use.
If optional argument PRINT-DEST is non-nil, output
stream (interactively, the echo area, or the current buffer with
a prefix argument), also print the used versions of Magit, Git,
and Emacs to it.

(fn &optional PRINT-DEST)" t)
(register-definition-prefixes "magit" '("magit-"))



(autoload 'magit-stage-file "magit-apply" "\
Stage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be staged.  Otherwise stage the file at point without
requiring confirmation.

(fn FILE)" t)
(autoload 'magit-stage-modified "magit-apply" "\
Stage all changes to files modified in the worktree.
Stage all new content of tracked files and remove tracked files
that no longer exist in the working tree from the index also.
With a prefix argument also stage previously untracked (but not
ignored) files.

(fn &optional ALL)" t)
(autoload 'magit-unstage-file "magit-apply" "\
Unstage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be unstaged.  Otherwise unstage the file at point
without requiring confirmation.

(fn FILE)" t)
(autoload 'magit-unstage-all "magit-apply" "\
Remove all changes from the staging area." t)
(register-definition-prefixes "magit-apply" '("magit-"))



(put 'magit-auto-revert-mode 'globalized-minor-mode t)
(defvar magit-auto-revert-mode (not (or global-auto-revert-mode noninteractive)) "\
Non-nil if Magit-Auto-Revert mode is enabled.
See the `magit-auto-revert-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-auto-revert-mode'.")
(custom-autoload 'magit-auto-revert-mode "magit-autorevert" nil)
(autoload 'magit-auto-revert-mode "magit-autorevert" "\
Toggle Auto-Revert mode in all buffers.
With prefix ARG, enable Magit-Auto-Revert mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Auto-Revert mode is enabled in all buffers where
`magit-turn-on-auto-revert-mode-if-desired' would do it.

See `auto-revert-mode' for more information on Auto-Revert mode.

(fn &optional ARG)" t)
(register-definition-prefixes "magit-autorevert" '("auto-revert-buffer" "magit-"))



 (autoload 'magit-bisect "magit-bisect" nil t)
(autoload 'magit-bisect-start "magit-bisect" "\
Start a bisect session.

Bisecting a bug means to find the commit that introduced it.
This command starts such a bisect session by asking for a known
good and a known bad commit.  To move the session forward use the
other actions from the bisect transient command (\\<magit-status-mode-map>\\[magit-bisect]).

(fn BAD GOOD ARGS)" t)
(autoload 'magit-bisect-reset "magit-bisect" "\
After bisecting, cleanup bisection state and return to original `HEAD'." t)
(autoload 'magit-bisect-good "magit-bisect" "\
While bisecting, mark the current commit as good.
Use this after you have asserted that the commit does not contain
the bug in question." t)
(autoload 'magit-bisect-bad "magit-bisect" "\
While bisecting, mark the current commit as bad.
Use this after you have asserted that the commit does contain the
bug in question." t)
(autoload 'magit-bisect-mark "magit-bisect" "\
While bisecting, mark the current commit with a bisect term.
During a bisect using alternate terms, commits can still be
marked with `magit-bisect-good' and `magit-bisect-bad', as those
commands map to the correct term (\"good\" to --term-old's value
and \"bad\" to --term-new's).  However, in some cases, it can be
difficult to keep that mapping straight in your head; this
command provides an interface that exposes the underlying terms." t)
(autoload 'magit-bisect-skip "magit-bisect" "\
While bisecting, skip the current commit.
Use this if for some reason the current commit is not a good one
to test.  This command lets Git choose a different one." t)
(autoload 'magit-bisect-run "magit-bisect" "\
Bisect automatically by running commands after each step.

Unlike `git bisect run' this can be used before bisecting has
begun.  In that case it behaves like `git bisect start; git
bisect run'.

(fn CMDLINE &optional BAD GOOD ARGS)" t)
(register-definition-prefixes "magit-bisect" '("magit-"))



 (autoload 'magit-blame-echo "magit-blame" nil t)
 (autoload 'magit-blame-addition "magit-blame" nil t)
 (autoload 'magit-blame-removal "magit-blame" nil t)
 (autoload 'magit-blame-reverse "magit-blame" nil t)
 (autoload 'magit-blame "magit-blame" nil t)
(register-definition-prefixes "magit-blame" '("magit-"))



(autoload 'magit--handle-bookmark "magit-bookmark" "\
Open a bookmark created by `magit--make-bookmark'.
Call the `magit-*-setup-buffer' function of the the major-mode
with the variables' values as arguments, which were recorded by
`magit--make-bookmark'.  Ignore `magit-display-buffer-function'.

(fn BOOKMARK)")
(register-definition-prefixes "magit-bookmark" '("magit--make-bookmark"))



 (autoload 'magit-branch "magit" nil t)
(autoload 'magit-checkout "magit-branch" "\
Checkout REVISION, updating the index and the working tree.
If REVISION is a local branch, then that becomes the current
branch.  If it is something else, then `HEAD' becomes detached.
Checkout fails if the working tree or the staging area contain
changes.

(git checkout REVISION).

(fn REVISION &optional ARGS)" t)
(autoload 'magit-branch-create "magit-branch" "\
Create BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT)" t)
(autoload 'magit-branch-and-checkout "magit-branch" "\
Create and checkout BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT &optional ARGS)" t)
(autoload 'magit-branch-or-checkout "magit-branch" "\
Hybrid between `magit-checkout' and `magit-branch-and-checkout'.

Ask the user for an existing branch or revision.  If the user
input actually can be resolved as a branch or revision, then
check that out, just like `magit-checkout' would.

Otherwise create and checkout a new branch using the input as
its name.  Before doing so read the starting-point for the new
branch.  This is similar to what `magit-branch-and-checkout'
does.

(fn ARG &optional START-POINT)" t)
(autoload 'magit-branch-checkout "magit-branch" "\
Checkout an existing or new local branch.

Read a branch name from the user offering all local branches and
a subset of remote branches as candidates.  Omit remote branches
for which a local branch by the same name exists from the list
of candidates.  The user can also enter a completely new branch
name.

- If the user selects an existing local branch, then check that
  out.

- If the user selects a remote branch, then create and checkout
  a new local branch with the same name.  Configure the selected
  remote branch as push target.

- If the user enters a new branch name, then create and check
  that out, after also reading the starting-point from the user.

In the latter two cases the upstream is also set.  Whether it is
set to the chosen START-POINT or something else depends on the
value of `magit-branch-adjust-remote-upstream-alist', just like
when using `magit-branch-and-checkout'.

(fn BRANCH &optional START-POINT)" t)
(autoload 'magit-branch-orphan "magit-branch" "\
Create and checkout an orphan BRANCH with contents from revision START-POINT.

(fn BRANCH START-POINT)" t)
(autoload 'magit-branch-spinout "magit-branch" "\
Create new branch from the unpushed commits.
Like `magit-branch-spinoff' but remain on the current branch.
If there are any uncommitted changes, then behave exactly like
`magit-branch-spinoff'.

(fn BRANCH &optional FROM)" t)
(autoload 'magit-branch-spinoff "magit-branch" "\
Create new branch from the unpushed commits.

Create and checkout a new branch starting at and tracking the
current branch.  That branch in turn is reset to the last commit
it shares with its upstream.  If the current branch has no
upstream or no unpushed commits, then the new branch is created
anyway and the previously current branch is not touched.

This is useful to create a feature branch after work has already
began on the old branch (likely but not necessarily \"master\").

If the current branch is a member of the value of option
`magit-branch-prefer-remote-upstream' (which see), then the
current branch will be used as the starting point as usual, but
the upstream of the starting-point may be used as the upstream
of the new branch, instead of the starting-point itself.

If optional FROM is non-nil, then the source branch is reset
to `FROM~', instead of to the last commit it shares with its
upstream.  Interactively, FROM is only ever non-nil, if the
region selects some commits, and among those commits, FROM is
the commit that is the fewest commits ahead of the source
branch.

The commit at the other end of the selection actually does not
matter, all commits between FROM and `HEAD' are moved to the new
branch.  If FROM is not reachable from `HEAD' or is reachable
from the source branch's upstream, then an error is raised.

(fn BRANCH &optional FROM)" t)
(autoload 'magit-branch-reset "magit-branch" "\
Reset a branch to the tip of another branch or any other commit.

When the branch being reset is the current branch, then do a
hard reset.  If there are any uncommitted changes, then the user
has to confirm the reset because those changes would be lost.

This is useful when you have started work on a feature branch but
realize it's all crap and want to start over.

When resetting to another branch and a prefix argument is used,
then also set the target branch as the upstream of the branch
that is being reset.

(fn BRANCH TO &optional SET-UPSTREAM)" t)
(autoload 'magit-branch-delete "magit-branch" "\
Delete one or multiple branches.
If the region marks multiple branches, then offer to delete
those, otherwise prompt for a single branch to be deleted,
defaulting to the branch at point.

(fn BRANCHES &optional FORCE)" t)
(autoload 'magit-branch-rename "magit-branch" "\
Rename the branch named OLD to NEW.

With a prefix argument FORCE, rename even if a branch named NEW
already exists.

If `branch.OLD.pushRemote' is set, then unset it.  Depending on
the value of `magit-branch-rename-push-target' (which see) maybe
set `branch.NEW.pushRemote' and maybe rename the push-target on
the remote.

(fn OLD NEW &optional FORCE)" t)
(autoload 'magit-branch-shelve "magit-branch" "\
Shelve a BRANCH.
Rename \"refs/heads/BRANCH\" to \"refs/shelved/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t)
(autoload 'magit-branch-unshelve "magit-branch" "\
Unshelve a BRANCH
Rename \"refs/shelved/BRANCH\" to \"refs/heads/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t)
 (autoload 'magit-branch-configure "magit-branch" nil t)
(register-definition-prefixes "magit-branch" '("magit-"))



 (autoload 'magit-bundle "magit-bundle" nil t)
 (autoload 'magit-bundle-import "magit-bundle" nil t)
(autoload 'magit-bundle-create-tracked "magit-bundle" "\
Create and track a new bundle.

(fn FILE TAG BRANCH REFS ARGS)" t)
(autoload 'magit-bundle-update-tracked "magit-bundle" "\
Update a bundle that is being tracked using TAG.

(fn TAG)" t)
(autoload 'magit-bundle-verify "magit-bundle" "\
Check whether FILE is valid and applies to the current repository.

(fn FILE)" t)
(autoload 'magit-bundle-list-heads "magit-bundle" "\
List the refs in FILE.

(fn FILE)" t)
(register-definition-prefixes "magit-bundle" '("magit-"))



 (autoload 'magit-clone "magit-clone" nil t)
(autoload 'magit-clone-regular "magit-clone" "\
Create a clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t)
(autoload 'magit-clone-shallow "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
With a prefix argument read the DEPTH of the clone;
otherwise use 1.

(fn REPOSITORY DIRECTORY ARGS DEPTH)" t)
(autoload 'magit-clone-shallow-since "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits before DATE, which is read from the
user.

(fn REPOSITORY DIRECTORY ARGS DATE)" t)
(autoload 'magit-clone-shallow-exclude "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits reachable from EXCLUDE, which is a
branch or tag read from the user.

(fn REPOSITORY DIRECTORY ARGS EXCLUDE)" t)
(autoload 'magit-clone-bare "magit-clone" "\
Create a bare clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t)
(autoload 'magit-clone-mirror "magit-clone" "\
Create a mirror of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t)
(register-definition-prefixes "magit-clone" '("magit-clone-"))



 (autoload 'magit-commit "magit-commit" nil t)
(autoload 'magit-commit-create "magit-commit" "\
Create a new commit on `HEAD'.
With a prefix argument, amend to the commit at `HEAD' instead.

(git commit [--amend] ARGS)

(fn &optional ARGS)" t)
(autoload 'magit-commit-amend "magit-commit" "\
Amend the last commit.

(git commit --amend ARGS)

(fn &optional ARGS)" t)
(autoload 'magit-commit-extend "magit-commit" "\
Amend the last commit, without editing the message.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-extend-override-date' can be used
to inverse the meaning of the prefix argument.  
(git commit
--amend --no-edit)

(fn &optional ARGS OVERRIDE-DATE)" t)
(autoload 'magit-commit-reword "magit-commit" "\
Reword the last commit, ignoring staged changes.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-reword-override-date' can be used
to inverse the meaning of the prefix argument.

Non-interactively respect the optional OVERRIDE-DATE argument
and ignore the option.

(git commit --amend --only)

(fn &optional ARGS OVERRIDE-DATE)" t)
(autoload 'magit-commit-fixup "magit-commit" "\
Create a fixup commit.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-squash "magit-commit" "\
Create a squash commit, without editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

If you want to immediately add a message to the squash commit,
then use `magit-commit-augment' instead of this command.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-augment "magit-commit" "\
Create a squash commit, editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-instant-fixup "magit-commit" "\
Create a fixup commit targeting COMMIT and instantly rebase.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-instant-squash "magit-commit" "\
Create a squash commit targeting COMMIT and instantly rebase.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-reshelve "magit-commit" "\
Change the committer date and possibly the author date of `HEAD'.

The current time is used as the initial minibuffer input and the
original author or committer date is available as the previous
history element.

Both the author and the committer dates are changes, unless one
of the following is true, in which case only the committer date
is updated:
- You are not the author of the commit that is being reshelved.
- The command was invoked with a prefix argument.
- Non-interactively if UPDATE-AUTHOR is nil.

(fn DATE UPDATE-AUTHOR &optional ARGS)" t)
(autoload 'magit-commit-absorb-modules "magit-commit" "\
Spread modified modules across recent commits.

(fn PHASE COMMIT)" t)
 (autoload 'magit-commit-absorb "magit-commit" nil t)
 (autoload 'magit-commit-autofixup "magit-commit" nil t)
(register-definition-prefixes "magit-commit" '("magit-"))



 (autoload 'magit-diff "magit-diff" nil t)
 (autoload 'magit-diff-refresh "magit-diff" nil t)
(autoload 'magit-diff-dwim "magit-diff" "\
Show changes for the thing at point.

(fn &optional ARGS FILES)" t)
(autoload 'magit-diff-range "magit-diff" "\
Show differences between two commits.

REV-OR-RANGE should be a range or a single revision.  If it is a
revision, then show changes in the working tree relative to that
revision.  If it is a range, but one side is omitted, then show
changes relative to `HEAD'.

If the region is active, use the revisions on the first and last
line of the region as the two sides of the range.  With a prefix
argument, instead of diffing the revisions, choose a revision to
view changes along, starting at the common ancestor of both
revisions (i.e., use a \"...\" range).

(fn REV-OR-RANGE &optional ARGS FILES)" t)
(autoload 'magit-diff-working-tree "magit-diff" "\
Show changes between the current working tree and the `HEAD' commit.
With a prefix argument show changes between the working tree and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t)
(autoload 'magit-diff-staged "magit-diff" "\
Show changes between the index and the `HEAD' commit.
With a prefix argument show changes between the index and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t)
(autoload 'magit-diff-unstaged "magit-diff" "\
Show changes between the working tree and the index.

(fn &optional ARGS FILES)" t)
(autoload 'magit-diff-unmerged "magit-diff" "\
Show changes that are being merged.

(fn &optional ARGS FILES)" t)
(autoload 'magit-diff-while-committing "magit-diff" "\
While committing, show the changes that are about to be committed.
While amending, invoking the command again toggles between
showing just the new changes or all the changes that will
be committed.

(fn &optional ARGS)" t)
(autoload 'magit-diff-buffer-file "magit-diff" "\
Show diff for the blob or file visited in the current buffer.

When the buffer visits a blob, then show the respective commit.
When the buffer visits a file, then show the differenced between
`HEAD' and the working tree.  In both cases limit the diff to
the file or blob." t)
(autoload 'magit-diff-paths "magit-diff" "\
Show changes between any two files on disk.

(fn A B)" t)
(autoload 'magit-show-commit "magit-diff" "\
Visit the revision at point in another buffer.
If there is no revision at point or with a prefix argument prompt
for a revision.

(fn REV &optional ARGS FILES MODULE)" t)
(register-definition-prefixes "magit-diff" '("magit-"))



 (autoload 'magit-ediff "magit-ediff" nil)
(autoload 'magit-ediff-resolve "magit-ediff" "\
Resolve outstanding conflicts in FILE using Ediff.
FILE has to be relative to the top directory of the repository.

In the rare event that you want to manually resolve all
conflicts, including those already resolved by Git, use
`ediff-merge-revisions-with-ancestor'.

(fn FILE)" t)
(autoload 'magit-ediff-stage "magit-ediff" "\
Stage and unstage changes to FILE using Ediff.
FILE has to be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-compare "magit-ediff" "\
Compare REVA:FILEA with REVB:FILEB using Ediff.

FILEA and FILEB have to be relative to the top directory of the
repository.  If REVA or REVB is nil, then this stands for the
working tree state.

If the region is active, use the revisions on the first and last
line of the region.  With a prefix argument, instead of diffing
the revisions, choose a revision to view changes along, starting
at the common ancestor of both revisions (i.e., use a \"...\"
range).

(fn REVA REVB FILEA FILEB)" t)
(autoload 'magit-ediff-dwim "magit-ediff" "\
Compare, stage, or resolve using Ediff.
This command tries to guess what file, and what commit or range
the user wants to compare, stage, or resolve using Ediff.  It
might only be able to guess either the file, or range or commit,
in which case the user is asked about the other.  It might not
always guess right, in which case the appropriate `magit-ediff-*'
command has to be used explicitly.  If it cannot read the user's
mind at all, then it asks the user for a command to run." t)
(autoload 'magit-ediff-show-staged "magit-ediff" "\
Show staged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-show-unstaged "magit-ediff" "\
Show unstaged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-show-working-tree "magit-ediff" "\
Show changes between `HEAD' and working tree using Ediff.
FILE must be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-show-commit "magit-ediff" "\
Show changes introduced by COMMIT using Ediff.

(fn COMMIT)" t)
(autoload 'magit-ediff-show-stash "magit-ediff" "\
Show changes introduced by STASH using Ediff.
`magit-ediff-show-stash-with-index' controls whether a
three-buffer Ediff is used in order to distinguish changes in the
stash that were staged.

(fn STASH)" t)
(register-definition-prefixes "magit-ediff" '("magit-ediff-"))



(autoload 'magit-run-git-gui "magit-extras" "\
Run `git gui' for the current git repository." t)
(autoload 'magit-run-git-gui-blame "magit-extras" "\
Run `git gui blame' on the given FILENAME and COMMIT.
Interactively run it for the current file and the `HEAD', with a
prefix or when the current file cannot be determined let the user
choose.  When the current buffer is visiting FILENAME instruct
blame to center around the line point is on.

(fn COMMIT FILENAME &optional LINENUM)" t)
(autoload 'magit-run-gitk "magit-extras" "\
Run `gitk' in the current repository." t)
(autoload 'magit-run-gitk-branches "magit-extras" "\
Run `gitk --branches' in the current repository." t)
(autoload 'magit-run-gitk-all "magit-extras" "\
Run `gitk --all' in the current repository." t)
(autoload 'ido-enter-magit-status "magit-extras" "\
Drop into `magit-status' from file switching.

This command does not work in Emacs 26.1.
See https://github.com/magit/magit/issues/3634
and https://debbugs.gnu.org/cgi/bugreport.cgi?bug=31707.

To make this command available use something like:

  (add-hook \\='ido-setup-hook
            (lambda ()
              (define-key ido-completion-map
                (kbd \"C-x g\") \\='ido-enter-magit-status)))

Starting with Emacs 25.1 the Ido keymaps are defined just once
instead of every time Ido is invoked, so now you can modify it
like pretty much every other keymap:

  (define-key ido-common-completion-map
    (kbd \"C-x g\") \\='ido-enter-magit-status)" t)
(autoload 'magit-project-status "magit-extras" "\
Run `magit-status' in the current project's root." t)
(autoload 'magit-dired-jump "magit-extras" "\
Visit file at point using Dired.
With a prefix argument, visit in another window.  If there
is no file at point, then instead visit `default-directory'.

(fn &optional OTHER-WINDOW)" t)
(autoload 'magit-dired-log "magit-extras" "\
Show log for all marked files, or the current file.

(fn &optional FOLLOW)" t)
(autoload 'magit-dired-am-apply-patches "magit-extras" "\
In Dired, apply the marked (or next ARG) files as patches.
If inside a repository, then apply in that.  Otherwise prompt
for a repository.

(fn REPO &optional ARG)" t)
(autoload 'magit-do-async-shell-command "magit-extras" "\
Open FILE with `dired-do-async-shell-command'.
Interactively, open the file at point.

(fn FILE)" t)
(autoload 'magit-previous-line "magit-extras" "\
Like `previous-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects an
area that is larger than the region.  This causes `previous-line'
when invoked while holding the shift key to move up one line and
thereby select two lines.  When invoked inside a hunk body this
command does not move point on the first invocation and thereby
it only selects a single line.  Which inconsistency you prefer
is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t)
(function-put 'magit-previous-line 'interactive-only '"use `forward-line' with negative argument instead.")
(autoload 'magit-next-line "magit-extras" "\
Like `next-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects
an area that is larger than the region.  This causes `next-line'
when invoked while holding the shift key to move down one line
and thereby select two lines.  When invoked inside a hunk body
this command does not move point on the first invocation and
thereby it only selects a single line.  Which inconsistency you
prefer is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t)
(function-put 'magit-next-line 'interactive-only 'forward-line)
(autoload 'magit-clean "magit-extras" "\
Remove untracked files from the working tree.
With a prefix argument also remove ignored files,
with two prefix arguments remove ignored files only.

(git clean -f -d [-x|-X])

(fn &optional ARG)" t)
(autoload 'magit-add-change-log-entry "magit-extras" "\
Find change log file and add date entry and item for current change.
This differs from `add-change-log-entry' (which see) in that
it acts on the current hunk in a Magit buffer instead of on
a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME OTHER-WINDOW)" t)
(autoload 'magit-add-change-log-entry-other-window "magit-extras" "\
Find change log file in other window and add entry and item.
This differs from `add-change-log-entry-other-window' (which see)
in that it acts on the current hunk in a Magit buffer instead of
on a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME)" t)
(autoload 'magit-edit-line-commit "magit-extras" "\
Edit the commit that added the current line.

With a prefix argument edit the commit that removes the line,
if any.  The commit is determined using `git blame' and made
editable using `git rebase --interactive' if it is reachable
from `HEAD', or by checking out the commit (or a branch that
points at it) otherwise.

(fn &optional TYPE)" t)
(autoload 'magit-diff-edit-hunk-commit "magit-extras" "\
From a hunk, edit the respective commit and visit the file.

First visit the file being modified by the hunk at the correct
location using `magit-diff-visit-file'.  This actually visits a
blob.  When point is on a diff header, not within an individual
hunk, then this visits the blob the first hunk is about.

Then invoke `magit-edit-line-commit', which uses an interactive
rebase to make the commit editable, or if that is not possible
because the commit is not reachable from `HEAD' by checking out
that commit directly.  This also causes the actual worktree file
to be visited.

Neither the blob nor the file buffer are killed when finishing
the rebase.  If that is undesirable, then it might be better to
use `magit-rebase-edit-command' instead of this command.

(fn FILE)" t)
(autoload 'magit-reshelve-since "magit-extras" "\
Change the author and committer dates of the commits since REV.

Ask the user for the first reachable commit whose dates should
be changed.  Then read the new date for that commit.  The initial
minibuffer input and the previous history element offer good
values.  The next commit will be created one minute later and so
on.

This command is only intended for interactive use and should only
be used on highly rearranged and unpublished history.

If KEYID is non-nil, then use that to sign all reshelved commits.
Interactively use the value of the \"--gpg-sign\" option in the
list returned by `magit-rebase-arguments'.

(fn REV KEYID)" t)
(autoload 'magit-pop-revision-stack "magit-extras" "\
Insert a representation of a revision into the current buffer.

Pop a revision from the `magit-revision-stack' and insert it into
the current buffer according to `magit-pop-revision-stack-format'.
Revisions can be put on the stack using `magit-copy-section-value'
and `magit-copy-buffer-revision'.

If the stack is empty or with a prefix argument, instead read a
revision in the minibuffer.  By using the minibuffer history this
allows selecting an item which was popped earlier or to insert an
arbitrary reference or revision without first pushing it onto the
stack.

When reading the revision from the minibuffer, then it might not
be possible to guess the correct repository.  When this command
is called inside a repository (e.g. while composing a commit
message), then that repository is used.  Otherwise (e.g. while
composing an email) then the repository recorded for the top
element of the stack is used (even though we insert another
revision).  If not called inside a repository and with an empty
stack, or with two prefix arguments, then read the repository in
the minibuffer too.

(fn REV TOPLEVEL)" t)
(autoload 'magit-copy-section-value "magit-extras" "\
Save the value of the current section for later use.

Save the section value to the `kill-ring', and, provided that
the current section is a commit, branch, or tag section, push
the (referenced) revision to the `magit-revision-stack' for use
with `magit-pop-revision-stack'.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'.

When the current section is a branch or a tag, and a prefix
argument is used, then save the revision at its tip to the
`kill-ring' instead of the reference name.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.  If a prefix argument is used and the region is within
a hunk, then strip the diff marker column and keep only either
the added or removed lines, depending on the sign of the prefix
argument.

(fn ARG)" t)
(autoload 'magit-copy-buffer-revision "magit-extras" "\
Save the revision of the current buffer for later use.

Save the revision shown in the current buffer to the `kill-ring'
and push it to the `magit-revision-stack'.

This command is mainly intended for use in `magit-revision-mode'
buffers, the only buffers where it is always unambiguous exactly
which revision should be saved.

Most other Magit buffers usually show more than one revision, in
some way or another, so this command has to select one of them,
and that choice might not always be the one you think would have
been the best pick.

In such buffers it is often more useful to save the value of
the current section instead, using `magit-copy-section-value'.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'." t)
(autoload 'magit-display-repository-buffer "magit-extras" "\
Display a Magit buffer belonging to the current Git repository.
The buffer is displayed using `magit-display-buffer', which see.

(fn BUFFER)" t)
(autoload 'magit-switch-to-repository-buffer "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t)
(autoload 'magit-switch-to-repository-buffer-other-window "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t)
(autoload 'magit-switch-to-repository-buffer-other-frame "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t)
(autoload 'magit-abort-dwim "magit-extras" "\
Abort current operation.
Depending on the context, this will abort a merge, a rebase, a
patch application, a cherry-pick, a revert, or a bisect." t)
(register-definition-prefixes "magit-extras" '("magit-"))



 (autoload 'magit-fetch "magit-fetch" nil t)
 (autoload 'magit-fetch-from-pushremote "magit-fetch" nil t)
 (autoload 'magit-fetch-from-upstream "magit-fetch" nil t)
(autoload 'magit-fetch-other "magit-fetch" "\
Fetch from another repository.

(fn REMOTE ARGS)" t)
(autoload 'magit-fetch-branch "magit-fetch" "\
Fetch a BRANCH from a REMOTE.

(fn REMOTE BRANCH ARGS)" t)
(autoload 'magit-fetch-refspec "magit-fetch" "\
Fetch a REFSPEC from a REMOTE.

(fn REMOTE REFSPEC ARGS)" t)
(autoload 'magit-fetch-all "magit-fetch" "\
Fetch from all remotes.

(fn ARGS)" t)
(autoload 'magit-fetch-all-prune "magit-fetch" "\
Fetch from all remotes, and prune.
Prune remote tracking branches for branches that have been
removed on the respective remote." t)
(autoload 'magit-fetch-all-no-prune "magit-fetch" "\
Fetch from all remotes." t)
(autoload 'magit-fetch-modules "magit-fetch" "\
Fetch all submodules.

Option `magit-fetch-modules-jobs' controls how many submodules
are being fetched in parallel.  Also fetch the super-repository,
because `git-fetch' does not support not doing that.  With a
prefix argument fetch all remotes.

(fn &optional ALL)" t)
(register-definition-prefixes "magit-fetch" '("magit-"))



(autoload 'magit-find-file "magit-files" "\
View FILE from REV.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go
to the line and column corresponding to that location.

(fn REV FILE)" t)
(autoload 'magit-find-file-other-window "magit-files" "\
View FILE from REV, in another window.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t)
(autoload 'magit-find-file-other-frame "magit-files" "\
View FILE from REV, in another frame.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t)
 (autoload 'magit-file-dispatch "magit" nil t)
(autoload 'magit-blob-visit-file "magit-files" "\
View the file from the worktree corresponding to the current blob.
When visiting a blob or the version from the index, then go to
the same location in the respective file in the working tree." t)
(autoload 'magit-file-checkout "magit-files" "\
Checkout FILE from REV.

(fn REV FILE)" t)
(register-definition-prefixes "magit-files" '("magit-"))



(register-definition-prefixes "magit-git" '("magit-"))



 (autoload 'magit-gitignore "magit-gitignore" nil t)
(autoload 'magit-gitignore-in-topdir "magit-gitignore" "\
Add the Git ignore RULE to the top-level \".gitignore\" file.
Since this file is tracked, it is shared with other clones of the
repository.  Also stage the file.

(fn RULE)" t)
(autoload 'magit-gitignore-in-subdir "magit-gitignore" "\
Add the Git ignore RULE to a \".gitignore\" file in DIRECTORY.
Prompt the user for a directory and add the rule to the
\".gitignore\" file in that directory.  Since such files are
tracked, they are shared with other clones of the repository.
Also stage the file.

(fn RULE DIRECTORY)" t)
(autoload 'magit-gitignore-in-gitdir "magit-gitignore" "\
Add the Git ignore RULE to \"$GIT_DIR/info/exclude\".
Rules in that file only affects this clone of the repository.

(fn RULE)" t)
(autoload 'magit-gitignore-on-system "magit-gitignore" "\
Add the Git ignore RULE to the file specified by `core.excludesFile'.
Rules that are defined in that file affect all local repositories.

(fn RULE)" t)
(autoload 'magit-skip-worktree "magit-gitignore" "\
Call \"git update-index --skip-worktree -- FILE\".

(fn FILE)" t)
(autoload 'magit-no-skip-worktree "magit-gitignore" "\
Call \"git update-index --no-skip-worktree -- FILE\".

(fn FILE)" t)
(autoload 'magit-assume-unchanged "magit-gitignore" "\
Call \"git update-index --assume-unchanged -- FILE\".

(fn FILE)" t)
(autoload 'magit-no-assume-unchanged "magit-gitignore" "\
Call \"git update-index --no-assume-unchanged -- FILE\".

(fn FILE)" t)
(register-definition-prefixes "magit-gitignore" '("magit-"))



(autoload 'magit-imenu--log-prev-index-position-function "magit-imenu" "\
Move point to previous line in current buffer.
This function is used as a value for
`imenu-prev-index-position-function'.")
(autoload 'magit-imenu--log-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line.")
(autoload 'magit-imenu--diff-prev-index-position-function "magit-imenu" "\
Move point to previous file line in current buffer.
This function is used as a value for
`imenu-prev-index-position-function'.")
(autoload 'magit-imenu--diff-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line.")
(autoload 'magit-imenu--status-create-index-function "magit-imenu" "\
Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'.")
(autoload 'magit-imenu--refs-create-index-function "magit-imenu" "\
Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'.")
(autoload 'magit-imenu--cherry-create-index-function "magit-imenu" "\
Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'.")
(autoload 'magit-imenu--submodule-prev-index-position-function "magit-imenu" "\
Move point to previous line in magit-submodule-list buffer.
This function is used as a value for
`imenu-prev-index-position-function'.")
(autoload 'magit-imenu--submodule-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line.")
(autoload 'magit-imenu--repolist-prev-index-position-function "magit-imenu" "\
Move point to previous line in magit-repolist buffer.
This function is used as a value for
`imenu-prev-index-position-function'.")
(autoload 'magit-imenu--repolist-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line.")
(autoload 'magit-imenu--process-prev-index-position-function "magit-imenu" "\
Move point to previous process in magit-process buffer.
This function is used as a value for
`imenu-prev-index-position-function'.")
(autoload 'magit-imenu--process-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line.")
(autoload 'magit-imenu--rebase-prev-index-position-function "magit-imenu" "\
Move point to previous commit in git-rebase buffer.
This function is used as a value for
`imenu-prev-index-position-function'.")
(autoload 'magit-imenu--rebase-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line.")
(register-definition-prefixes "magit-imenu" '("magit-imenu--index-function"))



 (autoload 'magit-log "magit-log" nil t)
 (autoload 'magit-log-refresh "magit-log" nil t)
(autoload 'magit-log-current "magit-log" "\
Show log for the current branch.
When `HEAD' is detached or with a prefix argument show log for
one or more revs read from the minibuffer.

(fn REVS &optional ARGS FILES)" t)
(autoload 'magit-log-other "magit-log" "\
Show log for one or more revs read from the minibuffer.
The user can input any revision or revisions separated by a
space, or even ranges, but only branches and tags, and a
representation of the commit at point, are available as
completion candidates.

(fn REVS &optional ARGS FILES)" t)
(autoload 'magit-log-head "magit-log" "\
Show log for `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-branches "magit-log" "\
Show log for all local branches and `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-matching-branches "magit-log" "\
Show log for all branches matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t)
(autoload 'magit-log-matching-tags "magit-log" "\
Show log for all tags matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t)
(autoload 'magit-log-all-branches "magit-log" "\
Show log for all local and remote branches and `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-all "magit-log" "\
Show log for all references and `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-buffer-file "magit-log" "\
Show log for the blob or file visited in the current buffer.
With a prefix argument or when `--follow' is an active log
argument, then follow renames.  When the region is active,
restrict the log to the lines that the region touches.

(fn &optional FOLLOW BEG END)" t)
(autoload 'magit-log-trace-definition "magit-log" "\
Show log for the definition at point.

(fn FILE FN REV)" t)
(autoload 'magit-log-merged "magit-log" "\
Show log for the merge of COMMIT into BRANCH.

More precisely, find merge commit M that brought COMMIT into
BRANCH, and show the log of the range \"M^1..M\".  If COMMIT is
directly on BRANCH, then show approximately twenty surrounding
commits instead.

This command requires git-when-merged, which is available from
https://github.com/mhagger/git-when-merged.

(fn COMMIT BRANCH &optional ARGS FILES)" t)
(autoload 'magit-log-move-to-parent "magit-log" "\
Move to the Nth parent of the current commit.

(fn &optional N)" t)
 (autoload 'magit-shortlog "magit-log" nil t)
(autoload 'magit-shortlog-since "magit-log" "\
Show a history summary for commits since REV.

(fn REV ARGS)" t)
(autoload 'magit-shortlog-range "magit-log" "\
Show a history summary for commit or range REV-OR-RANGE.

(fn REV-OR-RANGE ARGS)" t)
(autoload 'magit-cherry "magit-log" "\
Show commits in a branch that are not merged in the upstream branch.

(fn HEAD UPSTREAM)" t)
(register-definition-prefixes "magit-log" '("magit-"))



(register-definition-prefixes "magit-margin" '("magit-"))



 (autoload 'magit-merge "magit" nil t)
(autoload 'magit-merge-plain "magit-merge" "\
Merge commit REV into the current branch; using default message.

Unless there are conflicts or a prefix argument is used create a
merge commit using a generic commit message and without letting
the user inspect the result.  With a prefix argument pretend the
merge failed to give the user the opportunity to inspect the
merge.

(git merge --no-edit|--no-commit [ARGS] REV)

(fn REV &optional ARGS NOCOMMIT)" t)
(autoload 'magit-merge-editmsg "magit-merge" "\
Merge commit REV into the current branch; and edit message.
Perform the merge and prepare a commit message but let the user
edit it.

(git merge --edit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t)
(autoload 'magit-merge-nocommit "magit-merge" "\
Merge commit REV into the current branch; pretending it failed.
Pretend the merge failed to give the user the opportunity to
inspect the merge and change the commit message.

(git merge --no-commit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t)
(autoload 'magit-merge-into "magit-merge" "\
Merge the current branch into BRANCH and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
branch, then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t)
(autoload 'magit-merge-absorb "magit-merge" "\
Merge BRANCH into the current branch and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t)
(autoload 'magit-merge-squash "magit-merge" "\
Squash commit REV into the current branch; don't create a commit.

(git merge --squash REV)

(fn REV)" t)
(autoload 'magit-merge-preview "magit-merge" "\
Preview result of merging REV into the current branch.

(fn REV)" t)
(autoload 'magit-merge-abort "magit-merge" "\
Abort the current merge operation.

(git merge --abort)" t)
(register-definition-prefixes "magit-merge" '("magit-"))



(register-definition-prefixes "magit-mode" '("disable-magit-save-buffers" "magit-"))



 (autoload 'magit-notes "magit" nil t)
(register-definition-prefixes "magit-notes" '("magit-notes-"))



(register-definition-prefixes "magit-obsolete" '("magit--magit-popup-warning"))



 (autoload 'magit-patch "magit-patch" nil t)
 (autoload 'magit-patch-create "magit-patch" nil t)
 (autoload 'magit-patch-apply "magit-patch" nil t)
(autoload 'magit-patch-save "magit-patch" "\
Write current diff into patch FILE.

What arguments are used to create the patch depends on the value
of `magit-patch-save-arguments' and whether a prefix argument is
used.

If the value is the symbol `buffer', then use the same arguments
as the buffer.  With a prefix argument use no arguments.

If the value is a list beginning with the symbol `exclude', then
use the same arguments as the buffer except for those matched by
entries in the cdr of the list.  The comparison is done using
`string-prefix-p'.  With a prefix argument use the same arguments
as the buffer.

If the value is a list of strings (including the empty list),
then use those arguments.  With a prefix argument use the same
arguments as the buffer.

Of course the arguments that are required to actually show the
same differences as those shown in the buffer are always used.

(fn FILE &optional ARG)" t)
(autoload 'magit-request-pull "magit-patch" "\
Request upstream to pull from your public repository.

URL is the url of your publicly accessible repository.
START is a commit that already is in the upstream repository.
END is the last commit, usually a branch name, which upstream
is asked to pull.  START has to be reachable from that commit.

(fn URL START END)" t)
(register-definition-prefixes "magit-patch" '("magit-"))



(register-definition-prefixes "magit-process" '("magit-" "tramp-sh-handle-"))



 (autoload 'magit-pull "magit-pull" nil t)
 (autoload 'magit-pull-from-pushremote "magit-pull" nil t)
 (autoload 'magit-pull-from-upstream "magit-pull" nil t)
(autoload 'magit-pull-branch "magit-pull" "\
Pull from a branch read in the minibuffer.

(fn SOURCE ARGS)" t)
(register-definition-prefixes "magit-pull" '("magit-pull-"))



 (autoload 'magit-push "magit-push" nil t)
 (autoload 'magit-push-current-to-pushremote "magit-push" nil t)
 (autoload 'magit-push-current-to-upstream "magit-push" nil t)
(autoload 'magit-push-current "magit-push" "\
Push the current branch to a branch read in the minibuffer.

(fn TARGET ARGS)" t)
(autoload 'magit-push-other "magit-push" "\
Push an arbitrary branch or commit somewhere.
Both the source and the target are read in the minibuffer.

(fn SOURCE TARGET ARGS)" t)
(autoload 'magit-push-refspecs "magit-push" "\
Push one or multiple REFSPECS to a REMOTE.
Both the REMOTE and the REFSPECS are read in the minibuffer.  To
use multiple REFSPECS, separate them with commas.  Completion is
only available for the part before the colon, or when no colon
is used.

(fn REMOTE REFSPECS ARGS)" t)
(autoload 'magit-push-matching "magit-push" "\
Push all matching branches to another repository.
If multiple remotes exist, then read one from the user.
If just one exists, use that without requiring confirmation.

(fn REMOTE &optional ARGS)" t)
(autoload 'magit-push-tags "magit-push" "\
Push all tags to another repository.
If only one remote exists, then push to that.  Otherwise prompt
for a remote, offering the remote configured for the current
branch as default.

(fn REMOTE &optional ARGS)" t)
(autoload 'magit-push-tag "magit-push" "\
Push a tag to another repository.

(fn TAG REMOTE &optional ARGS)" t)
(autoload 'magit-push-notes-ref "magit-push" "\
Push a notes ref to another repository.

(fn REF REMOTE &optional ARGS)" t)
 (autoload 'magit-push-implicitly "magit-push" nil t)
(autoload 'magit-push-to-remote "magit-push" "\
Push to REMOTE without using an explicit refspec.
The REMOTE is read in the minibuffer.

This command simply runs \"git push -v [ARGS] REMOTE\".  ARGS
are the arguments specified in the popup buffer.  No refspec
arguments are used.  Instead the behavior depends on at least
these Git variables: `push.default', `remote.pushDefault',
`branch.<branch>.pushRemote', `branch.<branch>.remote',
`branch.<branch>.merge', and `remote.<remote>.push'.

(fn REMOTE ARGS)" t)
(register-definition-prefixes "magit-push" '("magit-"))



(autoload 'magit-reflog-current "magit-reflog" "\
Display the reflog of the current branch.
If `HEAD' is detached, then show the reflog for that instead." t)
(autoload 'magit-reflog-other "magit-reflog" "\
Display the reflog of a branch or another ref.

(fn REF)" t)
(autoload 'magit-reflog-head "magit-reflog" "\
Display the `HEAD' reflog." t)
(register-definition-prefixes "magit-reflog" '("magit-reflog-"))



 (autoload 'magit-show-refs "magit-refs" nil t)
(autoload 'magit-show-refs-head "magit-refs" "\
List and compare references in a dedicated buffer.
Compared with `HEAD'.

(fn &optional ARGS)" t)
(autoload 'magit-show-refs-current "magit-refs" "\
List and compare references in a dedicated buffer.
Compare with the current branch or `HEAD' if it is detached.

(fn &optional ARGS)" t)
(autoload 'magit-show-refs-other "magit-refs" "\
List and compare references in a dedicated buffer.
Compared with a branch read from the user.

(fn &optional REF ARGS)" t)
(register-definition-prefixes "magit-refs" '("magit-"))



 (autoload 'magit-remote "magit-remote" nil t)
(autoload 'magit-remote-add "magit-remote" "\
Add a remote named REMOTE and fetch it.

(fn REMOTE URL &optional ARGS)" t)
(autoload 'magit-remote-rename "magit-remote" "\
Rename the remote named OLD to NEW.

(fn OLD NEW)" t)
(autoload 'magit-remote-remove "magit-remote" "\
Delete the remote named REMOTE.

(fn REMOTE)" t)
(autoload 'magit-remote-prune "magit-remote" "\
Remove stale remote-tracking branches for REMOTE.

(fn REMOTE)" t)
(autoload 'magit-remote-prune-refspecs "magit-remote" "\
Remove stale refspecs for REMOTE.

A refspec is stale if there no longer exists at least one branch
on the remote that would be fetched due to that refspec.  A stale
refspec is problematic because its existence causes Git to refuse
to fetch according to the remaining non-stale refspecs.

If only stale refspecs remain, then offer to either delete the
remote or to replace the stale refspecs with the default refspec.

Also remove the remote-tracking branches that were created due to
the now stale refspecs.  Other stale branches are not removed.

(fn REMOTE)" t)
(autoload 'magit-remote-set-head "magit-remote" "\
Set the local representation of REMOTE's default branch.
Query REMOTE and set the symbolic-ref refs/remotes/<remote>/HEAD
accordingly.  With a prefix argument query for the branch to be
used, which allows you to select an incorrect value if you fancy
doing that.

(fn REMOTE &optional BRANCH)" t)
(autoload 'magit-remote-unset-head "magit-remote" "\
Unset the local representation of REMOTE's default branch.
Delete the symbolic-ref \"refs/remotes/<remote>/HEAD\".

(fn REMOTE)" t)
(autoload 'magit-remote-unshallow "magit-remote" "\
Convert a shallow remote into a full one.
If only a single refspec is set and it does not contain a
wildcard, then also offer to replace it with the standard
refspec.

(fn REMOTE)" t)
 (autoload 'magit-remote-configure "magit-remote" nil t)
(register-definition-prefixes "magit-remote" '("magit-"))



(autoload 'magit-list-repositories "magit-repos" "\
Display a list of repositories.

Use the options `magit-repository-directories' to control which
repositories are displayed." t)
(register-definition-prefixes "magit-repos" '("magit-"))



 (autoload 'magit-reset "magit" nil t)
(autoload 'magit-reset-mixed "magit-reset" "\
Reset the `HEAD' and index to COMMIT, but not the working tree.

(git reset --mixed COMMIT)

(fn COMMIT)" t)
(autoload 'magit-reset-soft "magit-reset" "\
Reset the `HEAD' to COMMIT, but not the index and working tree.

(git reset --soft REVISION)

(fn COMMIT)" t)
(autoload 'magit-reset-hard "magit-reset" "\
Reset the `HEAD', index, and working tree to COMMIT.

(git reset --hard REVISION)

(fn COMMIT)" t)
(autoload 'magit-reset-keep "magit-reset" "\
Reset the `HEAD' and index to COMMIT, while keeping uncommitted changes.

(git reset --keep REVISION)

(fn COMMIT)" t)
(autoload 'magit-reset-index "magit-reset" "\
Reset the index to COMMIT.
Keep the `HEAD' and working tree as-is, so if COMMIT refers to the
head this effectively unstages all changes.

(git reset COMMIT .)

(fn COMMIT)" t)
(autoload 'magit-reset-worktree "magit-reset" "\
Reset the worktree to COMMIT.
Keep the `HEAD' and index as-is.

(fn COMMIT)" t)
(autoload 'magit-reset-quickly "magit-reset" "\
Reset the `HEAD' and index to COMMIT, and possibly the working tree.
With a prefix argument reset the working tree otherwise don't.

(git reset --mixed|--hard COMMIT)

(fn COMMIT &optional HARD)" t)
(register-definition-prefixes "magit-reset" '("magit-reset-"))



(autoload 'magit-sequencer-continue "magit-sequence" "\
Resume the current cherry-pick or revert sequence." t)
(autoload 'magit-sequencer-skip "magit-sequence" "\
Skip the stopped at commit during a cherry-pick or revert sequence." t)
(autoload 'magit-sequencer-abort "magit-sequence" "\
Abort the current cherry-pick or revert sequence.
This discards all changes made since the sequence started." t)
 (autoload 'magit-cherry-pick "magit-sequence" nil t)
(autoload 'magit-cherry-copy "magit-sequence" "\
Copy COMMITS from another branch onto the current branch.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then pick all of them,
without prompting.

(fn COMMITS &optional ARGS)" t)
(autoload 'magit-cherry-apply "magit-sequence" "\
Apply the changes in COMMITS but do not commit them.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then apply all of them,
without prompting.

(fn COMMITS &optional ARGS)" t)
(autoload 'magit-cherry-harvest "magit-sequence" "\
Move COMMITS from another BRANCH onto the current branch.
Remove the COMMITS from BRANCH and stay on the current branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH &optional ARGS)" t)
(autoload 'magit-cherry-donate "magit-sequence" "\
Move COMMITS from the current branch onto another existing BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH &optional ARGS)" t)
(autoload 'magit-cherry-spinout "magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t)
(autoload 'magit-cherry-spinoff "magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and checkout BRANCH.
If a conflict occurs, then you have to fix that and finish
the process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t)
 (autoload 'magit-revert "magit-sequence" nil t)
(autoload 'magit-revert-and-commit "magit-sequence" "\
Revert COMMIT by creating a new commit.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t)
(autoload 'magit-revert-no-commit "magit-sequence" "\
Revert COMMIT by applying it in reverse to the worktree.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t)
 (autoload 'magit-am "magit-sequence" nil t)
(autoload 'magit-am-apply-patches "magit-sequence" "\
Apply the patches FILES.

(fn &optional FILES ARGS)" t)
(autoload 'magit-am-apply-maildir "magit-sequence" "\
Apply the patches from MAILDIR.

(fn &optional MAILDIR ARGS)" t)
(autoload 'magit-am-continue "magit-sequence" "\
Resume the current patch applying sequence." t)
(autoload 'magit-am-skip "magit-sequence" "\
Skip the stopped at patch during a patch applying sequence." t)
(autoload 'magit-am-abort "magit-sequence" "\
Abort the current patch applying sequence.
This discards all changes made since the sequence started." t)
 (autoload 'magit-rebase "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-pushremote "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-upstream "magit-sequence" nil t)
(autoload 'magit-rebase-branch "magit-sequence" "\
Rebase the current branch onto a branch read in the minibuffer.
All commits that are reachable from `HEAD' but not from the
selected branch TARGET are being rebased.

(fn TARGET ARGS)" t)
(autoload 'magit-rebase-subset "magit-sequence" "\
Rebase a subset of the current branch's history onto a new base.
Rebase commits from START to `HEAD' onto NEWBASE.
START has to be selected from a list of recent commits.

(fn NEWBASE START ARGS)" t)
(autoload 'magit-rebase-interactive "magit-sequence" "\
Start an interactive rebase sequence.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-autosquash "magit-sequence" "\
Combine squash and fixup commits with their intended targets.

(fn ARGS)" t)
(autoload 'magit-rebase-edit-commit "magit-sequence" "\
Edit a single older commit using rebase.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-reword-commit "magit-sequence" "\
Reword a single older commit using rebase.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-remove-commit "magit-sequence" "\
Remove a single older commit using rebase.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-continue "magit-sequence" "\
Restart the current rebasing operation.
In some cases this pops up a commit message buffer for you do
edit.  With a prefix argument the old message is reused as-is.

(fn &optional NOEDIT)" t)
(autoload 'magit-rebase-skip "magit-sequence" "\
Skip the current commit and restart the current rebase operation." t)
(autoload 'magit-rebase-edit "magit-sequence" "\
Edit the todo list of the current rebase operation." t)
(autoload 'magit-rebase-abort "magit-sequence" "\
Abort the current rebase operation, restoring the original branch." t)
(register-definition-prefixes "magit-sequence" '("magit-"))



 (autoload 'magit-stash "magit-stash" nil t)
(autoload 'magit-stash-both "magit-stash" "\
Create a stash of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-stash-index "magit-stash" "\
Create a stash of the index only.
Unstaged and untracked changes are not stashed.  The stashed
changes are applied in reverse to both the index and the
worktree.  This command can fail when the worktree is not clean.
Applying the resulting stash has the inverse effect.

(fn MESSAGE)" t)
(autoload 'magit-stash-worktree "magit-stash" "\
Create a stash of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-stash-keep-index "magit-stash" "\
Create a stash of the index and working tree, keeping index intact.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-snapshot-both "magit-stash" "\
Create a snapshot of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-snapshot-index "magit-stash" "\
Create a snapshot of the index only.
Unstaged and untracked changes are not stashed." t)
(autoload 'magit-snapshot-worktree "magit-stash" "\
Create a snapshot of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-stash-apply "magit-stash" "\
Apply a stash to the working tree.
Try to preserve the stash index.  If that fails because there
are staged changes, apply without preserving the stash index.

(fn STASH)" t)
(autoload 'magit-stash-pop "magit-stash" "\
Apply a stash to the working tree and remove it from stash list.
Try to preserve the stash index.  If that fails because there
are staged changes, apply without preserving the stash index
and forgo removing the stash.

(fn STASH)" t)
(autoload 'magit-stash-drop "magit-stash" "\
Remove a stash from the stash list.
When the region is active offer to drop all contained stashes.

(fn STASH)" t)
(autoload 'magit-stash-clear "magit-stash" "\
Remove all stashes saved in REF's reflog by deleting REF.

(fn REF)" t)
(autoload 'magit-stash-branch "magit-stash" "\
Create and checkout a new BRANCH from STASH.

(fn STASH BRANCH)" t)
(autoload 'magit-stash-branch-here "magit-stash" "\
Create and checkout a new BRANCH and apply STASH.
The branch is created using `magit-branch-and-checkout', using the
current branch or `HEAD' as the start-point.

(fn STASH BRANCH)" t)
(autoload 'magit-stash-format-patch "magit-stash" "\
Create a patch from STASH

(fn STASH)" t)
(autoload 'magit-stash-list "magit-stash" "\
List all stashes in a buffer." t)
(autoload 'magit-stash-show "magit-stash" "\
Show all diffs of a stash in a buffer.

(fn STASH &optional ARGS FILES)" t)
(register-definition-prefixes "magit-stash" '("magit-"))



(autoload 'magit-init "magit-status" "\
Initialize a Git repository, then show its status.

If the directory is below an existing repository, then the user
has to confirm that a new one should be created inside.  If the
directory is the root of the existing repository, then the user
has to confirm that it should be reinitialized.

Non-interactively DIRECTORY is (re-)initialized unconditionally.

(fn DIRECTORY)" t)
(autoload 'magit-status "magit-status" "\
Show the status of the current Git repository in a buffer.

If the current directory isn't located within a Git repository,
then prompt for an existing repository or an arbitrary directory,
depending on option `magit-repository-directories', and show the
status of the selected repository instead.

* If that option specifies any existing repositories, then offer
  those for completion and show the status buffer for the
  selected one.

* Otherwise read an arbitrary directory using regular file-name
  completion.  If the selected directory is the top-level of an
  existing working tree, then show the status buffer for that.

* Otherwise offer to initialize the selected directory as a new
  repository.  After creating the repository show its status
  buffer.

These fallback behaviors can also be forced using one or more
prefix arguments:

* With two prefix arguments (or more precisely a numeric prefix
  value of 16 or greater) read an arbitrary directory and act on
  it as described above.  The same could be accomplished using
  the command `magit-init'.

* With a single prefix argument read an existing repository, or
  if none can be found based on `magit-repository-directories',
  then fall back to the same behavior as with two prefix
  arguments.

(fn &optional DIRECTORY CACHE)" t)
(defalias 'magit 'magit-status "\
An alias for `magit-status' for better discoverability.

Instead of invoking this alias for `magit-status' using
\"M-x magit RET\", you should bind a key to `magit-status'
and read the info node `(magit)Getting Started', which
also contains other useful hints.")
(autoload 'magit-status-here "magit-status" "\
Like `magit-status' but with non-nil `magit-status-goto-file-position'." t)
(autoload 'magit-status-setup-buffer "magit-status" "\


(fn &optional DIRECTORY)")
(register-definition-prefixes "magit-status" '("magit-"))



 (autoload 'magit-submodule "magit-submodule" nil t)
 (autoload 'magit-submodule-add "magit-submodule" nil t)
(autoload 'magit-submodule-read-name-for-path "magit-submodule" "\


(fn PATH &optional PREFER-SHORT)")
 (autoload 'magit-submodule-register "magit-submodule" nil t)
 (autoload 'magit-submodule-populate "magit-submodule" nil t)
 (autoload 'magit-submodule-update "magit-submodule" nil t)
 (autoload 'magit-submodule-synchronize "magit-submodule" nil t)
 (autoload 'magit-submodule-unpopulate "magit-submodule" nil t)
(autoload 'magit-submodule-remove "magit-submodule" "\
Unregister MODULES and remove their working directories.

For safety reasons, do not remove the gitdirs and if a module has
uncommitted changes, then do not remove it at all.  If a module's
gitdir is located inside the working directory, then move it into
the gitdir of the superproject first.

With the \"--force\" argument offer to remove dirty working
directories and with a prefix argument offer to delete gitdirs.
Both actions are very dangerous and have to be confirmed.  There
are additional safety precautions in place, so you might be able
to recover from making a mistake here, but don't count on it.

(fn MODULES ARGS TRASH-GITDIRS)" t)
(autoload 'magit-insert-modules "magit-submodule" "\
Insert submodule sections.
Hook `magit-module-sections-hook' controls which module sections
are inserted, and option `magit-module-sections-nested' controls
whether they are wrapped in an additional section.")
(autoload 'magit-insert-modules-overview "magit-submodule" "\
Insert sections for all modules.
For each section insert the path and the output of `git describe --tags',
or, failing that, the abbreviated HEAD commit hash.")
(autoload 'magit-insert-modules-unpulled-from-upstream "magit-submodule" "\
Insert sections for modules that haven't been pulled from the upstream.
These sections can be expanded to show the respective commits.")
(autoload 'magit-insert-modules-unpulled-from-pushremote "magit-submodule" "\
Insert sections for modules that haven't been pulled from the push-remote.
These sections can be expanded to show the respective commits.")
(autoload 'magit-insert-modules-unpushed-to-upstream "magit-submodule" "\
Insert sections for modules that haven't been pushed to the upstream.
These sections can be expanded to show the respective commits.")
(autoload 'magit-insert-modules-unpushed-to-pushremote "magit-submodule" "\
Insert sections for modules that haven't been pushed to the push-remote.
These sections can be expanded to show the respective commits.")
(autoload 'magit-list-submodules "magit-submodule" "\
Display a list of the current repository's submodules." t)
(register-definition-prefixes "magit-submodule" '("magit-"))



 (autoload 'magit-subtree "magit-subtree" nil t)
 (autoload 'magit-subtree-import "magit-subtree" nil t)
 (autoload 'magit-subtree-export "magit-subtree" nil t)
(autoload 'magit-subtree-add "magit-subtree" "\
Add REF from REPOSITORY as a new subtree at PREFIX.

(fn PREFIX REPOSITORY REF ARGS)" t)
(autoload 'magit-subtree-add-commit "magit-subtree" "\
Add COMMIT as a new subtree at PREFIX.

(fn PREFIX COMMIT ARGS)" t)
(autoload 'magit-subtree-merge "magit-subtree" "\
Merge COMMIT into the PREFIX subtree.

(fn PREFIX COMMIT ARGS)" t)
(autoload 'magit-subtree-pull "magit-subtree" "\
Pull REF from REPOSITORY into the PREFIX subtree.

(fn PREFIX REPOSITORY REF ARGS)" t)
(autoload 'magit-subtree-push "magit-subtree" "\
Extract the history of the subtree PREFIX and push it to REF on REPOSITORY.

(fn PREFIX REPOSITORY REF ARGS)" t)
(autoload 'magit-subtree-split "magit-subtree" "\
Extract the history of the subtree PREFIX.

(fn PREFIX COMMIT ARGS)" t)
(register-definition-prefixes "magit-subtree" '("magit-"))



 (autoload 'magit-tag "magit" nil t)
(autoload 'magit-tag-create "magit-tag" "\
Create a new tag with the given NAME at REV.
With a prefix argument annotate the tag.

(git tag [--annotate] NAME REV)

(fn NAME REV &optional ARGS)" t)
(autoload 'magit-tag-delete "magit-tag" "\
Delete one or more tags.
If the region marks multiple tags (and nothing else), then offer
to delete those, otherwise prompt for a single tag to be deleted,
defaulting to the tag at point.

(git tag -d TAGS)

(fn TAGS)" t)
(autoload 'magit-tag-prune "magit-tag" "\
Offer to delete tags missing locally from REMOTE, and vice versa.

(fn TAGS REMOTE-TAGS REMOTE)" t)
(autoload 'magit-tag-release "magit-tag" "\
Create a release tag.

Assume that release tags match `magit-release-tag-regexp'.

First prompt for the name of the new tag using the highest
existing tag as initial input and leaving it to the user to
increment the desired part of the version string.

If `--annotate' is enabled, then prompt for the message of the
new tag.  Base the proposed tag message on the message of the
highest tag, provided that that contains the corresponding
version string and substituting the new version string for that.
Otherwise propose something like \"Foo-Bar 1.2.3\", given, for
example, a TAG \"v1.2.3\" and a repository located at something
like \"/path/to/foo-bar\".

(fn TAG MSG &optional ARGS)" t)
(register-definition-prefixes "magit-tag" '("magit-"))



(register-definition-prefixes "magit-transient" '("magit-"))



(autoload 'magit-emacs-Q-command "magit-utils" "\
Show a shell command that runs an uncustomized Emacs with only Magit loaded.
See info node `(magit)Debugging Tools' for more information." t)
(autoload 'Info-follow-nearest-node--magit-gitman "magit-utils" "\


(fn FN &optional FORK)")
(advice-add 'Info-follow-nearest-node :around 'Info-follow-nearest-node--magit-gitman)
(autoload 'org-man-export--magit-gitman "magit-utils" "\


(fn FN LINK DESCRIPTION FORMAT)")
(advice-add 'org-man-export :around 'org-man-export--magit-gitman)
(register-definition-prefixes "magit-utils" '("magit-"))



(defvar magit-wip-mode nil "\
Non-nil if Magit-Wip mode is enabled.
See the `magit-wip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-mode'.")
(custom-autoload 'magit-wip-mode "magit-wip" nil)
(autoload 'magit-wip-mode "magit-wip" "\
Save uncommitted changes to work-in-progress refs.

Whenever appropriate (i.e. when dataloss would be a possibility
otherwise) this mode causes uncommitted changes to be committed
to dedicated work-in-progress refs.

For historic reasons this mode is implemented on top of four
other `magit-wip-*' modes, which can also be used individually,
if you want finer control over when the wip refs are updated;
but that is discouraged.

This is a global minor mode.  If called interactively, toggle the
`Magit-Wip mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-wip-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'magit-wip-after-save-mode 'globalized-minor-mode t)
(defvar magit-wip-after-save-mode nil "\
Non-nil if Magit-Wip-After-Save mode is enabled.
See the `magit-wip-after-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-after-save-mode'.")
(custom-autoload 'magit-wip-after-save-mode "magit-wip" nil)
(autoload 'magit-wip-after-save-mode "magit-wip" "\
Toggle Magit-Wip-After-Save-Local mode in all buffers.
With prefix ARG, enable Magit-Wip-After-Save mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Magit-Wip-After-Save-Local mode is enabled in all buffers where
`magit-wip-after-save-local-mode-turn-on' would do it.

See `magit-wip-after-save-local-mode' for more information on
Magit-Wip-After-Save-Local mode.

(fn &optional ARG)" t)
(defvar magit-wip-after-apply-mode nil "\
Non-nil if Magit-Wip-After-Apply mode is enabled.
See the `magit-wip-after-apply-mode' command
for a description of this minor mode.")
(custom-autoload 'magit-wip-after-apply-mode "magit-wip" nil)
(autoload 'magit-wip-after-apply-mode "magit-wip" "\
Commit to work-in-progress refs.

After applying a change using any \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected files to the current wip refs.  For each branch there
may be two wip refs; one contains snapshots of the files as found
in the worktree and the other contains snapshots of the entries
in the index.

This is a global minor mode.  If called interactively, toggle the
`Magit-Wip-After-Apply mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-wip-after-apply-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(defvar magit-wip-before-change-mode nil "\
Non-nil if Magit-Wip-Before-Change mode is enabled.
See the `magit-wip-before-change-mode' command
for a description of this minor mode.")
(custom-autoload 'magit-wip-before-change-mode "magit-wip" nil)
(autoload 'magit-wip-before-change-mode "magit-wip" "\
Commit to work-in-progress refs before certain destructive changes.

Before invoking a revert command or an \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected tracked files to the current wip refs.  For each branch
there may be two wip refs; one contains snapshots of the files
as found in the worktree and the other contains snapshots of the
entries in the index.

Only changes to files which could potentially be affected by the
command which is about to be called are committed.

This is a global minor mode.  If called interactively, toggle the
`Magit-Wip-Before-Change mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-wip-before-change-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'magit-wip-commit-initial-backup "magit-wip" "\
Before saving, commit current file to a worktree wip ref.

The user has to add this function to `before-save-hook'.

Commit the current state of the visited file before saving the
current buffer to that file.  This backs up the same version of
the file as `backup-buffer' would, but stores the backup in the
worktree wip ref, which is also used by the various Magit Wip
modes, instead of in a backup file as `backup-buffer' would.

This function ignores the variables that affect `backup-buffer'
and can be used along-side that function, which is recommended
because this function only backs up files that are tracked in
a Git repository.")
(register-definition-prefixes "magit-wip" '("magit-"))



 (autoload 'magit-worktree "magit-worktree" nil t)
(autoload 'magit-worktree-checkout "magit-worktree" "\
Checkout BRANCH in a new worktree at PATH.

(fn PATH BRANCH)" t)
(autoload 'magit-worktree-branch "magit-worktree" "\
Create a new BRANCH and check it out in a new worktree at PATH.

(fn PATH BRANCH START-POINT &optional FORCE)" t)
(autoload 'magit-worktree-move "magit-worktree" "\
Move WORKTREE to PATH.

(fn WORKTREE PATH)" t)
(register-definition-prefixes "magit-worktree" '("magit-"))


(provide 'magit-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/pcre2el-1.11/pcre2el-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/pcre2el-1.11/pcre2el-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(defvar pcre-mode nil "\
Non-nil if PCRE mode is enabled.
See the `pcre-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pcre-mode'.")
(custom-autoload 'pcre-mode "pcre2el" nil)
(autoload 'pcre-mode "pcre2el" "\
Use emulated PCRE syntax for regexps wherever possible.

Advises the `interactive' specs of `read-regexp' and the
following other functions so that they read PCRE syntax and
translate to its Emacs equivalent:

- `align-regexp'
- `find-tag-regexp'
- `sort-regexp-fields'
- `isearch-message-prefix'
- `ibuffer-do-replace-regexp'

Also alters the behavior of `isearch-mode' when searching by regexp.

This is a global minor mode.  If called interactively, toggle the
`PCRE mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pcre-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pcre-query-replace-regexp "pcre2el" "\
Perform `query-replace-regexp' using PCRE syntax.

Consider using `pcre-mode' instead of this function." t)
(autoload 'rxt-elisp-to-pcre "pcre2el" "\
Translate REGEXP, a regexp in Emacs Lisp syntax, to Perl-compatible syntax.

Interactively, reads the regexp in one of three ways. With a
prefix arg, reads from minibuffer without string escaping, like
`query-replace-regexp'. Without a prefix arg, uses the text of
the region if it is active. Otherwise, uses the result of
evaluating the sexp before point (which might be a string regexp
literal or an expression that produces a string).

Displays the translated PCRE regexp in the echo area and copies
it to the kill ring.

Emacs regexp features such as syntax classes which cannot be
translated to PCRE will cause an error.

(fn REGEXP)" t)
(autoload 'rxt-elisp-to-rx "pcre2el" "\
Translate REGEXP, a regexp in Emacs Lisp syntax, to `rx' syntax.

See `rxt-elisp-to-pcre' for a description of the interactive
behavior and `rx' for documentation of the S-expression based
regexp syntax.

(fn REGEXP)" t)
(autoload 'rxt-elisp-to-strings "pcre2el" "\
Return a list of all strings matched by REGEXP, an Emacs Lisp regexp.

See `rxt-elisp-to-pcre' for a description of the interactive behavior.

This is useful primarily for getting back the original list of
strings from a regexp generated by `regexp-opt', but it will work
with any regexp without unbounded quantifiers (*, +, {2, } and so
on).

Throws an error if REGEXP contains any infinite quantifiers.

(fn REGEXP)" t)
(autoload 'rxt-toggle-elisp-rx "pcre2el" "\
Toggle the regexp near point between Elisp string and rx syntax." t)
(autoload 'rxt-pcre-to-elisp "pcre2el" "\
Translate PCRE, a regexp in Perl-compatible syntax, to Emacs Lisp.

Interactively, uses the contents of the region if it is active,
otherwise reads from the minibuffer. Prints the Emacs translation
in the echo area and copies it to the kill ring.

PCRE regexp features that cannot be translated into Emacs syntax
will cause an error. See the commentary section of pcre2el.el for
more details.

(fn PCRE &optional FLAGS)" t)
(defalias 'pcre-to-elisp 'rxt-pcre-to-elisp)
(autoload 'rxt-pcre-to-rx "pcre2el" "\
Translate PCRE, a regexp in Perl-compatible syntax, to `rx' syntax.

See `rxt-pcre-to-elisp' for a description of the interactive behavior.

(fn PCRE &optional FLAGS)" t)
(autoload 'rxt-pcre-to-strings "pcre2el" "\
Return a list of all strings matched by PCRE, a Perl-compatible regexp.

See `rxt-elisp-to-pcre' for a description of the interactive
behavior and `rxt-elisp-to-strings' for why this might be useful.

Throws an error if PCRE contains any infinite quantifiers.

(fn PCRE &optional FLAGS)" t)
(autoload 'rxt-explain-elisp "pcre2el" "\
Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.

REGEXP is a regular expression in Emacs Lisp syntax. See
`rxt-elisp-to-pcre' for a description of how REGEXP is read
interactively.

(fn REGEXP)" t)
(autoload 'rxt-explain-pcre "pcre2el" "\
Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.

REGEXP is a regular expression in PCRE syntax. See
`rxt-pcre-to-elisp' for a description of how REGEXP is read
interactively.

(fn REGEXP &optional FLAGS)" t)
(autoload 'rxt-quote-pcre "pcre2el" "\
Return a PCRE regexp which matches TEXT literally.

Any PCRE metacharacters in TEXT will be quoted with a backslash.

(fn TEXT)")
(autoload 'rxt-explain "pcre2el" "\
Pop up a buffer with pretty-printed `rx' syntax for the regex at point.

Chooses regex syntax to read based on current major mode, calling
`rxt-explain-elisp' if buffer is in `emacs-lisp-mode' or
`lisp-interaction-mode', or `rxt-explain-pcre' otherwise." t)
(autoload 'rxt-convert-syntax "pcre2el" "\
Convert regex at point to other kind of syntax, depending on major mode.

For buffers in `emacs-lisp-mode' or `lisp-interaction-mode',
calls `rxt-elisp-to-pcre' to convert to PCRE syntax. Otherwise,
calls `rxt-pcre-to-elisp' to convert to Emacs syntax.

The converted syntax is displayed in the echo area and copied to
the kill ring; see the two functions named above for details." t)
(autoload 'rxt-convert-to-rx "pcre2el" "\
Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode." t)
(autoload 'rxt-convert-to-strings "pcre2el" "\
Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode." t)
(autoload 'rxt-mode "pcre2el" "\
Regex translation utilities.

This is a minor mode.  If called interactively, toggle the `Rxt
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `rxt-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'turn-on-rxt-mode "pcre2el" "\
Turn on `rxt-mode' in the current buffer." t)
(put 'rxt-global-mode 'globalized-minor-mode t)
(defvar rxt-global-mode nil "\
Non-nil if Rxt-Global mode is enabled.
See the `rxt-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `rxt-global-mode'.")
(custom-autoload 'rxt-global-mode "pcre2el" nil)
(autoload 'rxt-global-mode "pcre2el" "\
Toggle Rxt mode in all buffers.
With prefix ARG, enable Rxt-Global mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Rxt mode is enabled in all buffers where `turn-on-rxt-mode' would do
it.

See `rxt-mode' for more information on Rxt mode.

(fn &optional ARG)" t)
(register-definition-prefixes "pcre2el" '("pcre-" "rxt-"))


(provide 'pcre2el-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/magit-todos-1.5.3/magit-todos-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/magit-todos-1.5.3/magit-todos-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(defvar magit-todos-mode nil "\
Non-nil if Magit-Todos mode is enabled.
See the `magit-todos-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-todos-mode'.")
(custom-autoload 'magit-todos-mode "magit-todos" nil)
(autoload 'magit-todos-mode "magit-todos" "\
Show list of to-do items in Magit status buffer for tracked files in repo.

This is a global minor mode.  If called interactively, toggle the
`Magit-Todos mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-todos-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'magit-todos-list "magit-todos" "\
Show to-do list of the current Git repository in a buffer.
With prefix, prompt for repository.

(fn &optional DIRECTORY)" t)
(autoload 'magit-todos-list-internal "magit-todos" "\
Open buffer showing to-do list of repository at DIRECTORY.

(fn DIRECTORY)")
(register-definition-prefixes "magit-todos" '("magit-todos-"))


(provide 'magit-todos-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/annalist-1.0.1/annalist-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/annalist-1.0.1/annalist-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'annalist-record "annalist" "\
In the store for ANNALIST, TYPE, and LOCAL, record RECORD.
ANNALIST should correspond to the package/user recording this information (e.g.
'general, 'me, etc.). TYPE is the type of information being recorded (e.g.
'keybindings). LOCAL corresponds to whether to store RECORD only for the current
buffer. This information together is used to select where RECORD should be
stored in and later retrieved from with `annalist-describe'. RECORD should be a
list of items to record and later print as org headings and column entries in a
single row. If PLIST is non-nil, RECORD should be a plist instead of an ordered
list (e.g. '(keymap org-mode-map key \"C-c a\" ...)). The plist keys should be
the symbols used for the definition of TYPE.

(fn ANNALIST TYPE RECORD &key LOCAL PLIST)")
(autoload 'annalist-describe "annalist" "\
Describe information recorded by ANNALIST for TYPE.
For example: (annalist-describe 'general 'keybindings) If VIEW is non-nil, use
those settings for displaying recorded information instead of the defaults.

(fn ANNALIST TYPE &optional VIEW)")
(register-definition-prefixes "annalist" '("annalist-"))


(provide 'annalist-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/vterm-20230130.745/vterm-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/vterm-20230130.745/vterm-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'vterm-module-compile "vterm" "\
Compile vterm-module." t)
(autoload 'vterm--bookmark-handler "vterm" "\
Handler to restore a vterm bookmark BMK.

If a vterm buffer of the same name does not exist, the function will create a
new vterm buffer of the name. It also checks the current directory and sets
it to the bookmarked directory if needed.

(fn BMK)")
(autoload 'vterm-next-error-function "vterm" "\
Advance to the next error message and visit the file where the error was.
This is the value of `next-error-function' in Compilation
buffers.  Prefix arg N says how many error messages to move
forwards (or backwards, if negative).

Optional argument RESET clears all the errors.

(fn N &optional RESET)" t)
(autoload 'vterm "vterm" "\
Create an interactive Vterm buffer.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

(fn &optional ARG)" t)
(autoload 'vterm-other-window "vterm" "\
Create an interactive Vterm buffer in another window.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

(fn &optional ARG)" t)
(register-definition-prefixes "vterm" '("vterm-"))


(provide 'vterm-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/all-the-icons-5.0.0/all-the-icons-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/all-the-icons-5.0.0/all-the-icons-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'all-the-icons-icon-for-dir "all-the-icons" "\
Get the formatted icon for DIR.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

Note: You want chevron, please use `all-the-icons-icon-for-dir-with-chevron'.

(fn DIR &rest ARG-OVERRIDES)")
(autoload 'all-the-icons-icon-for-file "all-the-icons" "\
Get the formatted icon for FILE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn FILE &rest ARG-OVERRIDES)")
(autoload 'all-the-icons-icon-for-mode "all-the-icons" "\
Get the formatted icon for MODE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn MODE &rest ARG-OVERRIDES)")
(autoload 'all-the-icons-icon-for-url "all-the-icons" "\
Get the formatted icon for URL.
If an icon for URL isn't found in `all-the-icons-url-alist', a globe is used.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn URL &rest ARG-OVERRIDES)")
(autoload 'all-the-icons-install-fonts "all-the-icons" "\
Helper function to download and install the latests fonts based on OS.
When PFX is non-nil, ignore the prompt and just install

(fn &optional PFX)" t)
(autoload 'all-the-icons-insert "all-the-icons" "\
Interactive icon insertion function.
When Prefix ARG is non-nil, insert the propertized icon.
When FAMILY is non-nil, limit the candidates to the icon set matching it.

(fn &optional ARG FAMILY)" t)
(register-definition-prefixes "all-the-icons" '("all-the-icons-"))


(provide 'all-the-icons-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/cape-0.12/cape-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/cape-0.12/cape-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'cape-history "cape" "\
Complete from Eshell, Comint or minibuffer history.
See also `consult-history' for a more flexible variant based on
`completing-read'. If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-file "cape" "\
Complete file name at point.
See the user option `cape-file-directory-must-exist'.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-symbol "cape" "\
Complete Elisp symbol at point.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-dabbrev "cape" "\
Complete with Dabbrev at point.

If INTERACTIVE is nil the function acts like a Capf. In case you
observe a performance issue with autocompletion and `cape-dabbrev'
it is strongly recommended to disable scanning in other buffers.
See the user options `cape-dabbrev-min-length' and
`cape-dabbrev-check-other-buffers'.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-ispell "cape" "\
Complete word at point with Ispell.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-dict "cape" "\
Complete word from dictionary at point.
See the custom option `cape-dict-file'.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-abbrev "cape" "\
Complete abbreviation at point.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-line "cape" "\
Complete current line from other lines.
The buffers returned by `cape-line-buffer-function' are scanned for lines.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-super-capf "cape" "\
Merge CAPFS and return new Capf which includes all candidates.

(fn &rest CAPFS)")
(autoload 'cape-company-to-capf "cape" "\
Convert Company BACKEND function to Capf.
VALID is the input comparator, see `cape--input-valid-p'.
This feature is experimental.

(fn BACKEND &optional VALID)")
(autoload 'cape-interactive-capf "cape" "\
Create interactive completion function from CAPF.

(fn CAPF)")
(autoload 'cape-wrap-buster "cape" "\
Call CAPF and return a completion table with cache busting.
The cache is busted when the input changes, where VALID is the input
comparator, see `cape--input-valid-p'.

(fn CAPF &optional VALID)")
(autoload 'cape-wrap-properties "cape" "\
Call CAPF and add additional completion PROPERTIES.
Completion properties include for example :exclusive, :annotation-function and
the various :company-* extensions. Furthermore a boolean :sort flag and a
completion :category symbol can be specified.

(fn CAPF &rest PROPERTIES)")
(autoload 'cape-wrap-nonexclusive "cape" "\
Call CAPF and ensure that it is marked as non-exclusive.

(fn CAPF)")
(autoload 'cape-wrap-predicate "cape" "\
Call CAPF and add an additional candidate PREDICATE.
The PREDICATE is passed the candidate symbol or string.

(fn CAPF PREDICATE)")
(autoload 'cape-wrap-silent "cape" "\
Call CAPF and silence it (no messages, no errors).

(fn CAPF)")
(autoload 'cape-wrap-case-fold "cape" "\
Call CAPF and return a case insenstive completion table.
If DONT-FOLD is non-nil return a case sensitive table instead.

(fn CAPF &optional DONT-FOLD)")
(autoload 'cape-wrap-noninterruptible "cape" "\
Call CAPF and return a non-interruptible completion table.

(fn CAPF)")
(autoload 'cape-wrap-prefix-length "cape" "\
Call CAPF and ensure that prefix length is greater or equal than LENGTH.
If the prefix is long enough, enforce auto completion.

(fn CAPF LENGTH)")
(autoload 'cape-wrap-inside-comment "cape" "\
Call CAPF only if inside comment.

(fn CAPF)")
(autoload 'cape-wrap-inside-string "cape" "\
Call CAPF only if inside string.

(fn CAPF)")
(autoload 'cape-wrap-purify "cape" "\
Call CAPF and ensure that it does not modify the buffer.

(fn CAPF)")
(autoload 'cape-wrap-accept-all "cape" "\
Call CAPF and return a completion table which accepts every input.

(fn CAPF)")
 (autoload 'cape-capf-accept-all "cape")
 (autoload 'cape-capf-buster "cape")
 (autoload 'cape-capf-case-fold "cape")
 (autoload 'cape-capf-inside-comment "cape")
 (autoload 'cape-capf-inside-string "cape")
 (autoload 'cape-capf-noninterruptible "cape")
 (autoload 'cape-capf-nonexclusive "cape")
 (autoload 'cape-capf-predicate "cape")
 (autoload 'cape-capf-prefix-length "cape")
 (autoload 'cape-capf-properties "cape")
 (autoload 'cape-capf-purify "cape")
 (autoload 'cape-capf-silent "cape")
(register-definition-prefixes "cape" '("cape-"))



 (autoload 'cape-tex "cape-char" nil t)
 (autoload 'cape-sgml "cape-char" nil t)
 (autoload 'cape-rfc1345 "cape-char" nil t)
(register-definition-prefixes "cape-char" '("cape-char--define"))



(autoload 'cape-keyword "cape-keyword" "\
Complete programming language keyword at point.
See the variable `cape-keyword-list'.
If INTERACTIVE is nil the function acts like a capf.

(fn &optional INTERACTIVE)" t)
(register-definition-prefixes "cape-keyword" '("cape-"))


(provide 'cape-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/which-key-3.6.0/which-key-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/which-key-3.6.0/which-key-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(defvar which-key-mode nil "\
Non-nil if Which-Key mode is enabled.
See the `which-key-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `which-key-mode'.")
(custom-autoload 'which-key-mode "which-key" nil)
(autoload 'which-key-mode "which-key" "\
Toggle which-key-mode.

This is a global minor mode.  If called interactively, toggle the
`Which-Key mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='which-key-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'which-key-setup-side-window-right "which-key" "\
Apply suggested settings for side-window that opens on right." t)
(autoload 'which-key-setup-side-window-right-bottom "which-key" "\
Apply suggested settings for side-window that opens on right
if there is space and the bottom otherwise." t)
(autoload 'which-key-setup-side-window-bottom "which-key" "\
Apply suggested settings for side-window that opens on bottom." t)
(autoload 'which-key-setup-minibuffer "which-key" "\
Apply suggested settings for minibuffer.
Do not use this setup if you use the paging commands. Instead use
`which-key-setup-side-window-bottom', which is nearly identical
but more functional." t)
(autoload 'which-key-add-keymap-based-replacements "which-key" "\
Replace the description of KEY using REPLACEMENT in KEYMAP.
KEY should take a format suitable for use in `kbd'. REPLACEMENT
should be a cons cell of the form (STRING . COMMAND) for each
REPLACEMENT, where STRING is the replacement string and COMMAND
is a symbol corresponding to the intended command to be
replaced. COMMAND can be nil if the binding corresponds to a key
prefix. An example is

(which-key-add-keymap-based-replacements global-map
  \"C-x w\" '(\"Save as\" . write-file)).

For backwards compatibility, REPLACEMENT can also be a string,
but the above format is preferred, and the option to use a string
for REPLACEMENT will eventually be removed.

(fn KEYMAP KEY REPLACEMENT &rest MORE)")
(autoload 'which-key-add-key-based-replacements "which-key" "\
Replace the description of KEY-SEQUENCE with REPLACEMENT.
KEY-SEQUENCE is a string suitable for use in `kbd'. REPLACEMENT
may either be a string, as in

(which-key-add-key-based-replacements \"C-x 1\" \"maximize\")

a cons of two strings as in

(which-key-add-key-based-replacements \"C-x 8\"
                                        '(\"unicode\" . \"Unicode keys\"))

or a function that takes a (KEY . BINDING) cons and returns a
replacement.

In the second case, the second string is used to provide a longer
name for the keys under a prefix.

MORE allows you to specifcy additional KEY REPLACEMENT pairs.  All
replacements are added to `which-key-replacement-alist'.

(fn KEY-SEQUENCE REPLACEMENT &rest MORE)")
(autoload 'which-key-add-major-mode-key-based-replacements "which-key" "\
Functions like `which-key-add-key-based-replacements'.
The difference is that MODE specifies the `major-mode' that must
be active for KEY-SEQUENCE and REPLACEMENT (MORE contains
addition KEY-SEQUENCE REPLACEMENT pairs) to apply.

(fn MODE KEY-SEQUENCE REPLACEMENT &rest MORE)")
(autoload 'which-key-reload-key-sequence "which-key" "\
Simulate entering the key sequence KEY-SEQ.
KEY-SEQ should be a list of events as produced by
`listify-key-sequence'. If nil, KEY-SEQ defaults to
`which-key--current-key-list'. Any prefix arguments that were
used are reapplied to the new key sequence.

(fn &optional KEY-SEQ)")
(autoload 'which-key-show-standard-help "which-key" "\
Call the command in `which-key--prefix-help-cmd-backup'.
Usually this is `describe-prefix-bindings'.

(fn &optional _)" t)
(autoload 'which-key-show-next-page-no-cycle "which-key" "\
Show next page of keys unless on the last page, in which case
call `which-key-show-standard-help'." t)
(autoload 'which-key-show-previous-page-no-cycle "which-key" "\
Show previous page of keys unless on the first page, in which
case do nothing." t)
(autoload 'which-key-show-next-page-cycle "which-key" "\
Show the next page of keys, cycling from end to beginning
after last page.

(fn &optional _)" t)
(autoload 'which-key-show-previous-page-cycle "which-key" "\
Show the previous page of keys, cycling from beginning to end
after first page.

(fn &optional _)" t)
(autoload 'which-key-show-top-level "which-key" "\
Show top-level bindings.

(fn &optional _)" t)
(autoload 'which-key-show-major-mode "which-key" "\
Show top-level bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. 

(fn &optional ALL)" t)
(autoload 'which-key-show-full-major-mode "which-key" "\
Show all bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. " t)
(autoload 'which-key-dump-bindings "which-key" "\
Dump bindings from PREFIX into buffer named BUFFER-NAME.

PREFIX should be a string suitable for `kbd'.

(fn PREFIX BUFFER-NAME)" t)
(autoload 'which-key-undo-key "which-key" "\
Undo last keypress and force which-key update.

(fn &optional _)" t)
(autoload 'which-key-C-h-dispatch "which-key" "\
Dispatch C-h commands by looking up key in
`which-key-C-h-map'. This command is always accessible (from any
prefix) if `which-key-use-C-h-commands' is non nil." t)
(autoload 'which-key-show-keymap "which-key" "\
Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

If NO-PAGING is non-nil, which-key will not intercept subsequent
keypresses for the paging functionality.

(fn KEYMAP &optional NO-PAGING)" t)
(autoload 'which-key-show-full-keymap "which-key" "\
Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

(fn KEYMAP)" t)
(autoload 'which-key-show-minor-mode-keymap "which-key" "\
Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'.

(fn &optional ALL)" t)
(autoload 'which-key-show-full-minor-mode-keymap "which-key" "\
Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'." t)
(register-definition-prefixes "which-key" '("evil-state" "which-key-"))


(provide 'which-key-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/evil-1.15.0/evil-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/evil-1.15.0/evil-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "evil-command-window" '("evil-"))



(register-definition-prefixes "evil-commands" '("evil-"))



(register-definition-prefixes "evil-common" '("bounds-of-evil-" "evil-" "forward-evil-"))



 (autoload 'evil-mode "evil" nil t)
(register-definition-prefixes "evil-core" '("evil-" "turn-o"))



(register-definition-prefixes "evil-digraphs" '("evil-digraph"))



(register-definition-prefixes "evil-ex" '("evil-"))



(register-definition-prefixes "evil-integration" '("evil-"))



(register-definition-prefixes "evil-jumps" '("evil-"))



(register-definition-prefixes "evil-macros" '("evil-"))



(register-definition-prefixes "evil-maps" '("evil-"))



(register-definition-prefixes "evil-repeat" '("evil-"))



(register-definition-prefixes "evil-search" '("evil-"))



(register-definition-prefixes "evil-states" '("evil-"))



(register-definition-prefixes "evil-test-helpers" '("evil-"))



(register-definition-prefixes "evil-tests" '("evil-"))



(register-definition-prefixes "evil-types" '("evil-ex-get-optional-register-and-count"))



(register-definition-prefixes "evil-vars" '("evil-"))


(provide 'evil-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/hide-mode-line-1.0.2/hide-mode-line-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/hide-mode-line-1.0.2/hide-mode-line-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'hide-mode-line-mode "hide-mode-line" "\
Minor mode to hide the mode-line in the current buffer.

This is a minor mode.  If called interactively, toggle the
`Hide-Mode-Line mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `hide-mode-line-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-hide-mode-line-mode 'globalized-minor-mode t)
(defvar global-hide-mode-line-mode nil "\
Non-nil if Global Hide-Mode-Line mode is enabled.
See the `global-hide-mode-line-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-hide-mode-line-mode'.")
(custom-autoload 'global-hide-mode-line-mode "hide-mode-line" nil)
(autoload 'global-hide-mode-line-mode "hide-mode-line" "\
Toggle Hide-Mode-Line mode in all buffers.
With prefix ARG, enable Global Hide-Mode-Line mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Hide-Mode-Line mode is enabled in all buffers where
`turn-on-hide-mode-line-mode' would do it.

See `hide-mode-line-mode' for more information on Hide-Mode-Line
mode.

(fn &optional ARG)" t)
(autoload 'turn-on-hide-mode-line-mode "hide-mode-line" "\
Turn on `hide-mode-line-mode'.
Unless in `fundamental-mode' or `hide-mode-line-excluded-modes'.")
(autoload 'turn-off-hide-mode-line-mode "hide-mode-line" "\
Turn off `hide-mode-line-mode'.")
(register-definition-prefixes "hide-mode-line" '("hide-mode-line-"))


(provide 'hide-mode-line-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/all-the-icons-ibuffer-1.3.0/all-the-icons-ibuffer-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/all-the-icons-ibuffer-1.3.0/all-the-icons-ibuffer-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'ibuffer-make-column-icon "all-the-icons-ibuffer")
(autoload 'ibuffer-make-column-size-h "all-the-icons-ibuffer")
(autoload 'ibuffer-make-column-mode+ "all-the-icons-ibuffer")
(autoload 'ibuffer-make-column-filename-and-process+ "all-the-icons-ibuffer")
(defvar all-the-icons-ibuffer-mode nil "\
Non-nil if All-The-Icons-Ibuffer mode is enabled.
See the `all-the-icons-ibuffer-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `all-the-icons-ibuffer-mode'.")
(custom-autoload 'all-the-icons-ibuffer-mode "all-the-icons-ibuffer" nil)
(autoload 'all-the-icons-ibuffer-mode "all-the-icons-ibuffer" "\
Display icons for all buffers in ibuffer.

This is a global minor mode.  If called interactively, toggle the
`All-The-Icons-Ibuffer mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='all-the-icons-ibuffer-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "all-the-icons-ibuffer" '("all-the-icons-ibuffer-"))


(provide 'all-the-icons-ibuffer-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/evil-collection-0.0.8/evil-collection-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/evil-collection-0.0.8/evil-collection-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'evil-collection-translate-minor-mode-key "evil-collection" "\
Similar to `evil-collection-translate-key' but for minor modes.

(fn STATES MODES &rest TRANSLATIONS &key DESTRUCTIVE &allow-other-keys)")
(function-put 'evil-collection-translate-minor-mode-key 'lisp-indent-function 'defun)
(autoload 'evil-collection-translate-key "evil-collection" "\
Translate keys in the keymap(s) corresponding to STATES and KEYMAPS.
STATES should be the name of an evil state, a list of states, or nil. KEYMAPS
should be a symbol corresponding to the keymap to make the translations in or a
list of keymap symbols. Like `evil-define-key', when a keymap does not exist,
the keybindings will be deferred until the keymap is defined, so
`with-eval-after-load' is not necessary. TRANSLATIONS corresponds to a list of
key replacement pairs. For example, specifying \"a\" \"b\" will bind \"a\" to
\"b\"'s definition in the keymap. Specifying nil as a replacement will unbind a
key. If DESTRUCTIVE is nil, a backup of the keymap will be stored on the initial
invocation, and future invocations will always look up keys in the backup
keymap. When no TRANSLATIONS are given, this function will only create the
backup keymap without making any translations. On the other hand, if DESTRUCTIVE
is non-nil, the keymap will be destructively altered without creating a backup.
For example, calling this function multiple times with \"a\" \"b\" \"b\" \"a\"
would continue to swap and unswap the definitions of these keys. This means that
when DESTRUCTIVE is non-nil, all related swaps/cycles should be done in the same
invocation.

(fn STATES KEYMAPS &rest TRANSLATIONS &key DESTRUCTIVE &allow-other-keys)")
(function-put 'evil-collection-translate-key 'lisp-indent-function 'defun)
(autoload 'evil-collection-swap-key "evil-collection" "\
Wrapper around `evil-collection-translate-key' for swapping keys.
STATES, KEYMAPS, and ARGS are passed to `evil-collection-translate-key'. ARGS
should consist of key swaps (e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\"
\"a\" with `evil-collection-translate-key') and optionally keyword arguments for
`evil-collection-translate-key'.

(fn STATES KEYMAPS &rest ARGS)" nil t)
(function-put 'evil-collection-swap-key 'lisp-indent-function 'defun)
(autoload 'evil-collection-swap-minor-mode-key "evil-collection" "\
Wrapper around `evil-collection-translate-minor-mode-key' for swapping keys.
STATES, MODES, and ARGS are passed to
`evil-collection-translate-minor-mode-key'. ARGS should consist of key swaps
(e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\" \"a\"
with `evil-collection-translate-minor-mode-key') and optionally keyword
arguments for `evil-collection-translate-minor-mode-key'.

(fn STATES MODES &rest ARGS)" nil t)
(function-put 'evil-collection-swap-minor-mode-key 'lisp-indent-function 'defun)
(autoload 'evil-collection-require "evil-collection" "\
Require the evil-collection-MODE file, but do not activate it.

MODE should be a symbol. This requires the evil-collection-MODE
feature without needing to manipulate `load-path'. NOERROR is
forwarded to `require'.

(fn MODE &optional NOERROR)")
(autoload 'evil-collection-init "evil-collection" "\
Register the Evil bindings for all modes in `evil-collection-mode-list'.

Alternatively, you may register select bindings manually, for
instance:

  (with-eval-after-load ='calendar
    (evil-collection-calendar-setup))

If MODES is specified (as either one mode or a list of modes), use those modes
instead of the modes in `evil-collection-mode-list'.

(fn &optional MODES)" t)
(register-definition-prefixes "evil-collection" '("evil-collection-"))


(provide 'evil-collection-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/svg-lib-0.2.5/svg-lib-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/svg-lib-0.2.5/svg-lib-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "svg-lib" '("svg-lib-"))


(provide 'svg-lib-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dired-hacks-utils-20221127.1247/dired-hacks-utils-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dired-hacks-utils-20221127.1247/dired-hacks-utils-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "dired-hacks-utils" '("dired-"))


(provide 'dired-hacks-utils-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dired-subtree-20230118.1953/dired-subtree-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dired-subtree-20230118.1953/dired-subtree-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'dired-subtree-narrow "dired-subtree" "\
Narrow the buffer to this subtree." t)
(autoload 'dired-subtree-up "dired-subtree" "\
Jump up one directory.

(fn &optional ARG)" t)
(autoload 'dired-subtree-down "dired-subtree" "\
Jump down one directory.

(fn &optional ARG)" t)
(autoload 'dired-subtree-next-sibling "dired-subtree" "\
Go to the next sibling.

(fn &optional ARG)" t)
(autoload 'dired-subtree-previous-sibling "dired-subtree" "\
Go to the previous sibling.

(fn &optional ARG)" t)
(autoload 'dired-subtree-beginning "dired-subtree" "\
Go to the first file in this subtree." t)
(autoload 'dired-subtree-end "dired-subtree" "\
Go to the first file in this subtree." t)
(autoload 'dired-subtree-mark-subtree "dired-subtree" "\
Mark all files in this subtree.

With prefix argument mark all the files in subdirectories
recursively.

(fn &optional ALL)" t)
(autoload 'dired-subtree-unmark-subtree "dired-subtree" "\
Unmark all files in this subtree.

With prefix argument unmark all the files in subdirectories
recursively.

(fn &optional ALL)" t)
(autoload 'dired-subtree-revert "dired-subtree" "\
Revert the subtree.

This means reinserting the content of this subtree and all its
children." t)
(autoload 'dired-subtree-insert "dired-subtree" "\
Insert subtree under this directory." t)
(autoload 'dired-subtree-remove "dired-subtree" "\
Remove subtree at point." t)
(autoload 'dired-subtree-toggle "dired-subtree" "\
Insert subtree at point or remove it if it was not present." t)
(autoload 'dired-subtree-cycle "dired-subtree" "\
Org-mode like cycle visibility:

1) Show subtree
2) Show subtree recursively (if previous command was cycle)
3) Remove subtree

Numeric prefix will set max depth

(fn &optional MAX-DEPTH)" t)
(autoload 'dired-subtree-only-this-file "dired-subtree" "\
Remove all the siblings on the route from this file to the top-most directory.

With ARG non-nil, do not remove expanded directories in parents.

(fn &optional ARG)" t)
(autoload 'dired-subtree-only-this-directory "dired-subtree" "\
Remove all the siblings on the route from this directory to the top-most directory.

With ARG non-nil, do not remove expanded directories in parents.

(fn &optional ARG)" t)
(autoload 'dired-subtree-apply-filter "dired-subtree" "\
Push a local filter for this subtree.

This depends on `dired-filter' package.

It works exactly the same as global dired filters, only
restricted to a subtree.  The global filter is also applied to
the subtree.  The filter action is read from `dired-filter-map'." t)
(register-definition-prefixes "dired-subtree" '("dired-"))


(provide 'dired-subtree-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/corfu-0.34/corfu-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/corfu-0.34/corfu-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'corfu-mode "corfu" "\
Completion Overlay Region FUnction.

This is a minor mode.  If called interactively, toggle the `Corfu
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `corfu-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-corfu-mode 'globalized-minor-mode t)
(defvar global-corfu-mode nil "\
Non-nil if Global Corfu mode is enabled.
See the `global-corfu-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-corfu-mode'.")
(custom-autoload 'global-corfu-mode "corfu" nil)
(autoload 'global-corfu-mode "corfu" "\
Toggle Corfu mode in all buffers.
With prefix ARG, enable Global Corfu mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Corfu mode is enabled in all buffers where `corfu--on' would do it.

See `corfu-mode' for more information on Corfu mode.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu" '("corfu-"))



(defvar corfu-echo-mode nil "\
Non-nil if Corfu-Echo mode is enabled.
See the `corfu-echo-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `corfu-echo-mode'.")
(custom-autoload 'corfu-echo-mode "corfu-echo" nil)
(autoload 'corfu-echo-mode "corfu-echo" "\
Show candidate documentation in echo area.

This is a global minor mode.  If called interactively, toggle the
`Corfu-Echo mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-echo-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu-echo" '("corfu-echo-"))



(defvar corfu-history-mode nil "\
Non-nil if Corfu-History mode is enabled.
See the `corfu-history-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `corfu-history-mode'.")
(custom-autoload 'corfu-history-mode "corfu-history" nil)
(autoload 'corfu-history-mode "corfu-history" "\
Update Corfu history and sort completions by history.

This is a global minor mode.  If called interactively, toggle the
`Corfu-History mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-history-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu-history" '("corfu-history"))



(defvar corfu-indexed-mode nil "\
Non-nil if Corfu-Indexed mode is enabled.
See the `corfu-indexed-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `corfu-indexed-mode'.")
(custom-autoload 'corfu-indexed-mode "corfu-indexed" nil)
(autoload 'corfu-indexed-mode "corfu-indexed" "\
Prefix candidates with indices.

This is a global minor mode.  If called interactively, toggle the
`Corfu-Indexed mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-indexed-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu-indexed" '("corfu-indexed-"))



(autoload 'corfu-info-documentation "corfu-info" "\
Show documentation of current candidate." t)
(autoload 'corfu-info-location "corfu-info" "\
Show location of current candidate." t)
(register-definition-prefixes "corfu-info" '("corfu-info--restore-on-next-command"))



(defvar corfu-popupinfo-mode nil "\
Non-nil if Corfu-Popupinfo mode is enabled.
See the `corfu-popupinfo-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `corfu-popupinfo-mode'.")
(custom-autoload 'corfu-popupinfo-mode "corfu-popupinfo" nil)
(autoload 'corfu-popupinfo-mode "corfu-popupinfo" "\
Corfu info popup minor mode.

This is a global minor mode.  If called interactively, toggle the
`Corfu-Popupinfo mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-popupinfo-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu-popupinfo" '("corfu-popupinfo-"))



(autoload 'corfu-quick-jump "corfu-quick" "\
Jump to candidate using quick keys." t)
(autoload 'corfu-quick-insert "corfu-quick" "\
Insert candidate using quick keys." t)
(autoload 'corfu-quick-complete "corfu-quick" "\
Complete candidate using quick keys." t)
(register-definition-prefixes "corfu-quick" '("corfu-quick"))


(provide 'corfu-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/org-appear-0.3.0/org-appear-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/org-appear-0.3.0/org-appear-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'org-appear-mode "org-appear" "\
A minor mode that automatically toggles elements in Org mode.

This is a minor mode.  If called interactively, toggle the
`Org-Appear mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `org-appear-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "org-appear" '("org-appear-"))


(provide 'org-appear-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/compat-29.1.3.2/compat-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/compat-29.1.3.2/compat-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "compat" '("compat-"))



(register-definition-prefixes "compat-macs" '("compat-"))


(provide 'compat-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/shrink-path-0.3.1/shrink-path-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/shrink-path-0.3.1/shrink-path-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'shrink-path-dirs "shrink-path" "\
Given PATH return fish-styled shrunken down path.
TRUNCATE-TAIL will cause the function to truncate the last directory too.

(fn &optional PATH TRUNCATE-TAIL)")
(autoload 'shrink-path-expand "shrink-path" "\
Return expanded path from STR if found or list of matches on multiple.
The path referred to by STR has to exist for this to work.
If ABSOLUTE-P is t the returned path will be absolute.

(fn STR &optional ABSOLUTE-P)")
(autoload 'shrink-path-prompt "shrink-path" "\
Return cons of BASE and DIR for PWD.
If PWD isn't provided will default to `default-directory'.

(fn &optional PWD)")
(autoload 'shrink-path-file "shrink-path" "\
Return FILE's shrunk down path and filename.
TRUNCATE-TAIL controls if the last directory should also be shortened.

(fn FILE &optional TRUNCATE-TAIL)")
(autoload 'shrink-path-file-expand "shrink-path" "\
Return STR's expanded filename.
The path referred to by STR has to exist for this to work.
If EXISTS-P is t the filename also has to exist.
If ABSOLUTE-P is t the returned path will be absolute.

(fn STR &optional EXISTS-P ABSOLUTE-P)")
(autoload 'shrink-path-file-mixed "shrink-path" "\
Returns list of mixed truncated file name locations.

Consists of SHRINK-PATH's parent, SHRINK-PATH basename, relative REL-PATH and
FILENAME.
For use in modeline or prompts, etc.

(fn SHRINK-PATH REL-PATH FILENAME)")
(register-definition-prefixes "shrink-path" '("shrink-path--"))


(provide 'shrink-path-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/doom-modeline-3.3.2/doom-modeline-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/doom-modeline-3.3.2/doom-modeline-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'doom-modeline-set-main-modeline "doom-modeline" "\
Set main mode-line.
If DEFAULT is non-nil, set the default mode-line for all buffers.

(fn &optional DEFAULT)")
(defvar doom-modeline-mode nil "\
Non-nil if Doom-Modeline mode is enabled.
See the `doom-modeline-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `doom-modeline-mode'.")
(custom-autoload 'doom-modeline-mode "doom-modeline" nil)
(autoload 'doom-modeline-mode "doom-modeline" "\
Toggle `doom-modeline' on or off.

This is a global minor mode.  If called interactively, toggle the
`Doom-Modeline mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='doom-modeline-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "doom-modeline" '("doom-modeline-"))



(register-definition-prefixes "doom-modeline-core" '("doom-modeline"))



 (autoload 'doom-modeline-env-setup-python "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-ruby "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-perl "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-go "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-elixir "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-rust "doom-modeline-env")
(register-definition-prefixes "doom-modeline-env" '("doom-modeline-"))



(register-definition-prefixes "doom-modeline-segments" '("doom-modeline-"))


(provide 'doom-modeline-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/evil-org-1.0.2/evil-org-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/evil-org-1.0.2/evil-org-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'evil-org-mode "evil-org" "\
Buffer local minor mode for evil-org

This is a minor mode.  If called interactively, toggle the
`Evil-Org mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `evil-org-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "evil-org" '("evil-org-"))



(register-definition-prefixes "evil-org-agenda" '("evil-org-agenda-set-keys"))


(provide 'evil-org-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/emacsql-3.1.1/emacsql-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/emacsql-3.1.1/emacsql-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'emacsql-show-last-sql "emacsql" "\
Display the compiled SQL of the s-expression SQL expression before point.
A prefix argument causes the SQL to be printed into the current buffer.

(fn &optional PREFIX)" t)
(register-definition-prefixes "emacsql" '("emacsql-"))



(register-definition-prefixes "emacsql-compiler" '("emacsql-"))


(provide 'emacsql-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/emacsql-sqlite-3.1.1/emacsql-sqlite-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/emacsql-sqlite-3.1.1/emacsql-sqlite-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "emacsql-sqlite" '("emacsql-sqlite-"))


(provide 'emacsql-sqlite-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/closql-1.2.1/closql-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/closql-1.2.1/closql-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "closql" '("closql-" "eieio-"))


(provide 'closql-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/treepy-0.1.2/treepy-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/treepy-0.1.2/treepy-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "treepy" '("treepy-"))


(provide 'treepy-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/ghub-3.5.6/ghub-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/ghub-3.5.6/ghub-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "buck" '("buck-default-host"))



(autoload 'ghub-clear-caches "ghub" "\
Clear all caches that might negatively affect Ghub.

If a library that is used by Ghub caches incorrect information
such as a mistyped password, then that can prevent Ghub from
asking the user for the correct information again.

Set `url-http-real-basic-auth-storage' to nil
and call `auth-source-forget+'." t)
(register-definition-prefixes "ghub" '("ghub-"))



(register-definition-prefixes "ghub-graphql" '("ghub-"))



(register-definition-prefixes "glab" '("glab-default-host"))



(register-definition-prefixes "gogs" '("gogs-default-host"))



(register-definition-prefixes "gsexp" '("gsexp-"))



(register-definition-prefixes "gtea" '("gtea-default-host"))


(provide 'ghub-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/markdown-mode-2.5/markdown-mode-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/markdown-mode-2.5/markdown-mode-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'markdown-mode "markdown-mode" "\
Major mode for editing Markdown files.

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))
(autoload 'gfm-mode "markdown-mode" "\
Major mode for editing GitHub Flavored Markdown files.

(fn)" t)
(autoload 'markdown-view-mode "markdown-mode" "\
Major mode for viewing Markdown content.

(fn)" t)
(autoload 'gfm-view-mode "markdown-mode" "\
Major mode for viewing GitHub Flavored Markdown content.

(fn)" t)
(autoload 'markdown-live-preview-mode "markdown-mode" "\
Toggle native previewing on save for a specific markdown file.

This is a minor mode.  If called interactively, toggle the
`Markdown-Live-Preview mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `markdown-live-preview-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "markdown-mode" '("defun-markdown-" "gfm-" "markdown"))


(provide 'markdown-mode-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/yaml-0.5.1/yaml-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/yaml-0.5.1/yaml-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "yaml" '("yaml-"))


(provide 'yaml-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/forge-0.3.2/forge-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/forge-0.3.2/forge-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(defvar forge-add-default-bindings t "\
Whether to add Forge's bindings to various Magit keymaps.
If you want to disable this, then you must set this to nil before
`magit' is loaded.  If you do it before `forge' but after `magit'
is loaded, then `magit-mode-map' ends up being modified anyway.")
(with-eval-after-load 'magit-mode (when forge-add-default-bindings (define-key magit-mode-map "'" 'forge-dispatch) (define-key magit-mode-map "N" 'forge-dispatch)))
(register-definition-prefixes "forge" '("forge-"))



(register-definition-prefixes "forge-bitbucket" '("forge-bitbucket-repository"))



 (autoload 'forge-dispatch "forge-commands" nil t)
(autoload 'forge-pull "forge-commands" "\
Pull topics from the forge repository.

With a prefix argument and if the repository has not been fetched
before, then read a date from the user and limit pulled topics to
those that have been updated since then.

If pulling is too slow, then also consider setting the Git variable
`forge.omitExpensive' to `true'.

(fn &optional REPO UNTIL)" t)
(autoload 'forge-pull-notifications "forge-commands" "\
Fetch notifications for all repositories from the current forge." t)
(autoload 'forge-pull-topic "forge-commands" "\
Pull the API data for the current topic.
If there is no current topic or with a prefix argument read a
TOPIC to pull instead.

(fn TOPIC)" t)
(autoload 'forge-browse-dwim "forge-commands" "\
Visit a topic, branch or commit using a browser.
Prefer a topic over a branch and that over a commit." t)
(autoload 'forge-browse-commit "forge-commands" "\
Visit the url corresponding to REV using a browser.

(fn REV)" t)
(autoload 'forge-copy-url-at-point-as-kill "forge-commands" "\
Copy the url of the thing at point." t)
(autoload 'forge-browse-branch "forge-commands" "\
Visit the url corresponding BRANCH using a browser.

(fn BRANCH)" t)
(autoload 'forge-browse-remote "forge-commands" "\
Visit the url corresponding to REMOTE using a browser.

(fn REMOTE)" t)
(autoload 'forge-browse-repository "forge-commands" "\
View the current repository in a separate buffer.

(fn REPO)" t)
(autoload 'forge-browse-topic "forge-commands" "\
Visit the current topic using a browser." t)
(autoload 'forge-browse-pullreqs "forge-commands" "\
Visit the pull-requests of the current repository using a browser." t)
(autoload 'forge-browse-pullreq "forge-commands" "\
Visit the url corresponding to PULLREQ using a browser.

(fn PULLREQ)" t)
(autoload 'forge-browse-issues "forge-commands" "\
Visit the issues of the current repository using a browser." t)
(autoload 'forge-browse-issue "forge-commands" "\
Visit the current issue using a browser.
If there is no current issue or with a prefix argument
read an ISSUE to visit.

(fn ISSUE)" t)
(autoload 'forge-browse-post "forge-commands" "\
Visit the current post using a browser." t)
(autoload 'forge-visit-topic "forge-commands" "\
View the current topic in a separate buffer.
If there is no current topic or with a prefix argument
read a topic to visit instead.

(fn TOPIC)" t)
(autoload 'forge-visit-pullreq "forge-commands" "\
View the current pull-request in a separate buffer.
If there is no current pull-request or with a prefix argument
read a PULLREQ to visit instead.

(fn PULLREQ)" t)
(autoload 'forge-visit-issue "forge-commands" "\
Visit the current issue in a separate buffer.
If there is no current issue or with a prefix argument
read an ISSUE to visit instead.

(fn ISSUE)" t)
(autoload 'forge-visit-repository "forge-commands" "\
View the current repository in a separate buffer.

(fn REPO)" t)
(autoload 'forge-branch-pullreq "forge-commands" "\
Create and configure a new branch from a pull-request.
Please see the manual for more information.

(fn PULLREQ)" t)
(autoload 'forge-checkout-pullreq "forge-commands" "\
Create, configure and checkout a new branch from a pull-request.
Please see the manual for more information.

(fn PULLREQ)" t)
(autoload 'forge-checkout-worktree "forge-commands" "\
Create, configure and checkout a new worktree from a pull-request.
This is like `forge-checkout-pullreq', except that it also
creates a new worktree. Please see the manual for more
information.

(fn PATH PULLREQ)" t)
(autoload 'forge-fork "forge-commands" "\
Fork the current repository to FORK and add it as a REMOTE.
If the fork already exists, then that isn't an error; the remote
is added anyway.  Currently this only supports Github and Gitlab.

(fn FORK REMOTE)" t)
(autoload 'forge-list-notifications "forge-commands" "\
List notifications." t)
(autoload 'forge-add-pullreq-refspec "forge-commands" "\
Configure Git to fetch all pull-requests.
This is done by adding \"+refs/pull/*/head:refs/pullreqs/*\"
to the value of `remote.REMOTE.fetch', where REMOTE is the
upstream remote.  Also fetch from REMOTE." t)
(autoload 'forge-add-repository "forge-commands" "\
Add a repository to the database.
Offer to either pull topics (now and in the future) or to only
pull individual topics when the user invokes `forge-pull-topic'.

(fn URL)" t)
(function-put 'forge-add-repository 'interactive-only 't)
(autoload 'forge-add-user-repositories "forge-commands" "\
Add all of USER's repositories from HOST to the database.
This may take a while.  Only Github is supported at the moment.

(fn HOST USER)" t)
(autoload 'forge-add-organization-repositories "forge-commands" "\
Add all of ORGANIZATION's repositories from HOST to the database.
This may take a while.  Only Github is supported at the moment.

(fn HOST ORGANIZATION)" t)
(autoload 'forge-merge "forge-commands" "\
Merge the current pull-request using METHOD using the forge's API.

If there is no current pull-request or with a prefix argument,
then read pull-request PULLREQ to visit instead.

Use of this command is discouraged.  Unless the remote repository
is configured to disallow that, you should instead merge locally
and then push the target branch.  Forges detect that you have
done that and respond by automatically marking the pull-request
as merged.

(fn PULLREQ METHOD)" t)
(autoload 'forge-remove-repository "forge-commands" "\
Remove a repository from the database.

(fn HOST OWNER NAME)" t)
(autoload 'forge-remove-topic-locally "forge-commands" "\
Remove a topic from the local database only.
Due to how the supported APIs work, it would be too expensive to
automatically remove topics from the local datbase that were
removed from the forge.  The purpose of this command is to allow
you to manually clean up the local database.

(fn TOPIC)" t)
(autoload 'forge-reset-database "forge-commands" "\
Move the current database file to the trash.
This is useful after the database scheme has changed, which will
happen a few times while the forge functionality is still under
heavy development." t)
(register-definition-prefixes "forge-commands" '("forge-"))



(register-definition-prefixes "forge-core" '("forge-"))



(register-definition-prefixes "forge-db" '("forge-"))



(register-definition-prefixes "forge-gitea" '("forge-gitea-repository"))



(register-definition-prefixes "forge-github" '("forge-"))



(register-definition-prefixes "forge-gitlab" '("forge-gitlab-repository"))



(register-definition-prefixes "forge-gogs" '("forge-gogs-repository"))



(register-definition-prefixes "forge-issue" '("forge-"))



(autoload 'forge-list-topics "forge-list" "\
List topics of the current repository in a separate buffer.

(fn ID)" t)
(autoload 'forge-list-issues "forge-list" "\
List issues of the current repository in a separate buffer.

(fn ID)" t)
(autoload 'forge-list-labeled-issues "forge-list" "\
List issues of the current repository that have LABEL.
List them in a separate buffer.

(fn ID LABEL)" t)
(autoload 'forge-list-assigned-issues "forge-list" "\
List issues of the current repository that are assigned to you.
List them in a separate buffer.

(fn ID)" t)
(autoload 'forge-list-owned-issues "forge-list" "\
List open issues from all your Github repositories.
Options `forge-owned-accounts' and `forge-owned-ignored'
controls which repositories are considered to be owned by you.
Only Github is supported for now." t)
(autoload 'forge-list-pullreqs "forge-list" "\
List pull-requests of the current repository in a separate buffer.

(fn ID)" t)
(autoload 'forge-list-labeled-pullreqs "forge-list" "\
List pull-requests of the current repository that have LABEL.
List them in a separate buffer.

(fn ID LABEL)" t)
(autoload 'forge-list-assigned-pullreqs "forge-list" "\
List pull-requests of the current repository that are assigned to you.
List them in a separate buffer.

(fn ID)" t)
(autoload 'forge-list-requested-reviews "forge-list" "\
List pull-requests of the current repository that are awaiting your review.
List them in a separate buffer.

(fn ID)" t)
(autoload 'forge-list-owned-pullreqs "forge-list" "\
List open pull-requests from all your Github repositories.
Options `forge-owned-accounts' and `forge-owned-ignored'
controls which repositories are considered to be owned by you.
Only Github is supported for now." t)
(autoload 'forge-list-authored-pullreqs "forge-list" "\
List open pull-requests of the current repository that are authored by you.
List them in a separate buffer.

(fn ID)" t)
(autoload 'forge-list-authored-issues "forge-list" "\
List open issues from the current repository that are authored by you.
List them in a separate buffer.

(fn ID)" t)
(autoload 'forge-list-repositories "forge-list" "\
List known repositories in a separate buffer.
Here \"known\" means that an entry exists in the local database." t)
(autoload 'forge-list-owned-repositories "forge-list" "\
List your own known repositories in a separate buffer.
Here \"known\" means that an entry exists in the local database
and options `forge-owned-accounts' and `forge-owned-ignored'
controls which repositories are considered to be owned by you.
Only Github is supported for now." t)
(register-definition-prefixes "forge-list" '("forge-"))



(register-definition-prefixes "forge-notify" '("forge-"))



(register-definition-prefixes "forge-post" '("forge-"))



(register-definition-prefixes "forge-pullreq" '("forge-"))



(register-definition-prefixes "forge-repo" '("forge-"))



(register-definition-prefixes "forge-revnote" '("forge-revnote"))



(register-definition-prefixes "forge-semi" '("forge-"))



(register-definition-prefixes "forge-topic" '("forge-"))


(provide 'forge-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/vertico-1.0/vertico-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/vertico-1.0/vertico-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(defvar vertico-mode nil "\
Non-nil if Vertico mode is enabled.
See the `vertico-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-mode'.")
(custom-autoload 'vertico-mode "vertico" nil)
(autoload 'vertico-mode "vertico" "\
VERTical Interactive COmpletion.

This is a global minor mode.  If called interactively, toggle the
`Vertico mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico" '("vertico-"))



(defvar vertico-buffer-mode nil "\
Non-nil if Vertico-Buffer mode is enabled.
See the `vertico-buffer-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-buffer-mode'.")
(custom-autoload 'vertico-buffer-mode "vertico-buffer" nil)
(autoload 'vertico-buffer-mode "vertico-buffer" "\
Display Vertico in a buffer instead of the minibuffer.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Buffer mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-buffer-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-buffer" '("vertico-buffer-"))



(autoload 'vertico-directory-enter "vertico-directory" "\
Enter directory or exit completion with current candidate." t)
(autoload 'vertico-directory-up "vertico-directory" "\
Delete N directories before point.

(fn &optional N)" t)
(autoload 'vertico-directory-delete-char "vertico-directory" "\
Delete N directories or chars before point.

(fn &optional N)" t)
(autoload 'vertico-directory-delete-word "vertico-directory" "\
Delete N directories or words before point.

(fn &optional N)" t)
(autoload 'vertico-directory-tidy "vertico-directory" "\
Tidy shadowed file name, see `rfn-eshadow-overlay'.")



(defvar vertico-flat-mode nil "\
Non-nil if Vertico-Flat mode is enabled.
See the `vertico-flat-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-flat-mode'.")
(custom-autoload 'vertico-flat-mode "vertico-flat" nil)
(autoload 'vertico-flat-mode "vertico-flat" "\
Flat, horizontal display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Flat mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-flat-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-flat" '("vertico-flat-"))



(defvar vertico-grid-mode nil "\
Non-nil if Vertico-Grid mode is enabled.
See the `vertico-grid-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-grid-mode'.")
(custom-autoload 'vertico-grid-mode "vertico-grid" nil)
(autoload 'vertico-grid-mode "vertico-grid" "\
Grid display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Grid mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-grid-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-grid" '("vertico-grid-"))



(defvar vertico-indexed-mode nil "\
Non-nil if Vertico-Indexed mode is enabled.
See the `vertico-indexed-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-indexed-mode'.")
(custom-autoload 'vertico-indexed-mode "vertico-indexed" nil)
(autoload 'vertico-indexed-mode "vertico-indexed" "\
Prefix candidates with indices.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Indexed mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-indexed-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-indexed" '("vertico-indexed-"))



(defvar vertico-mouse-mode nil "\
Non-nil if Vertico-Mouse mode is enabled.
See the `vertico-mouse-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-mouse-mode'.")
(custom-autoload 'vertico-mouse-mode "vertico-mouse" nil)
(autoload 'vertico-mouse-mode "vertico-mouse" "\
Mouse support for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Mouse mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-mouse-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-mouse" '("vertico-mouse--"))



(defvar vertico-multiform-mode nil "\
Non-nil if Vertico-Multiform mode is enabled.
See the `vertico-multiform-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-multiform-mode'.")
(custom-autoload 'vertico-multiform-mode "vertico-multiform" nil)
(autoload 'vertico-multiform-mode "vertico-multiform" "\
Configure Vertico in various forms per command.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Multiform mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-multiform-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-multiform" '("vertico-multiform-"))



(autoload 'vertico-quick-jump "vertico-quick" "\
Jump to candidate using quick keys." t)
(autoload 'vertico-quick-exit "vertico-quick" "\
Exit with candidate using quick keys." t)
(autoload 'vertico-quick-insert "vertico-quick" "\
Insert candidate using quick keys." t)
(register-definition-prefixes "vertico-quick" '("vertico-quick"))



(autoload 'vertico-repeat-save "vertico-repeat" "\
Save Vertico session for `vertico-repeat'.
This function must be registered as `minibuffer-setup-hook'.")
(autoload 'vertico-repeat-last "vertico-repeat" "\
Repeat last Vertico completion SESSION.
If called interactively from an existing Vertico session,
`vertico-repeat-last' will restore the last input and
last selected candidate for the current command.

(fn &optional SESSION)" t)
(autoload 'vertico-repeat-select "vertico-repeat" "\
Select a Vertico session from the session history and repeat it.
If called from an existing Vertico session, you can select among
previous sessions for the current command." t)
(autoload 'vertico-repeat "vertico-repeat" "\
Repeat last Vertico session.
If prefix ARG is non-nil, offer completion menu to select from session history.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-repeat" '("vertico-repeat-"))



(defvar vertico-reverse-mode nil "\
Non-nil if Vertico-Reverse mode is enabled.
See the `vertico-reverse-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-reverse-mode'.")
(custom-autoload 'vertico-reverse-mode "vertico-reverse" nil)
(autoload 'vertico-reverse-mode "vertico-reverse" "\
Reverse the Vertico display.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Reverse mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-reverse-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-reverse" '("vertico-reverse-"))



(defvar vertico-unobtrusive-mode nil "\
Non-nil if Vertico-Unobtrusive mode is enabled.
See the `vertico-unobtrusive-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-unobtrusive-mode'.")
(custom-autoload 'vertico-unobtrusive-mode "vertico-unobtrusive" nil)
(autoload 'vertico-unobtrusive-mode "vertico-unobtrusive" "\
Unobtrusive display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Unobtrusive mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-unobtrusive-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-unobtrusive" '("vertico-unobtrusive--orig-count"))


(provide 'vertico-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/tablist-1.0/tablist-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/tablist-1.0/tablist-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'tablist-minor-mode "tablist" "\
Toggle Tablist minor mode on or off.

This is a minor mode.  If called interactively, toggle the
`Tablist minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `tablist-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'tablist-mode "tablist" "\


(fn)" t)
(register-definition-prefixes "tablist" '("tablist-"))



(register-definition-prefixes "tablist-filter" '("tablist-filter-"))


(provide 'tablist-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/pdf-tools-1.0.0/pdf-tools-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/pdf-tools-1.0.0/pdf-tools-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'pdf-annot-minor-mode "pdf-annot" "\
Support for PDF Annotations.

\\{pdf-annot-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Annot minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-annot-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-annot" '("pdf-annot-"))



(register-definition-prefixes "pdf-cache" '("boundingbox" "define-pdf-cache-function" "page" "pdf-cache-" "textregions"))



(register-definition-prefixes "pdf-dev" '("pdf-dev-"))



(autoload 'pdf-history-minor-mode "pdf-history" "\
Keep a history of previously visited pages.

This is a simple stack-based history.  Turning the page or
following a link pushes the left-behind page on the stack, which
may be navigated with the following keys.

\\{pdf-history-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-History minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-history-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-history" '("pdf-history-"))



(register-definition-prefixes "pdf-info" '("pdf-info-"))



(autoload 'pdf-isearch-minor-mode "pdf-isearch" "\
Isearch mode for PDF buffer.

When this mode is enabled \\[isearch-forward], among other keys,
starts an incremental search in this PDF document.  Since this mode
uses external programs to highlight found matches via
image-processing, proceeding to the next match may be slow.

Therefore two isearch behaviours have been defined: Normal isearch and
batch mode.  The later one is a minor mode
(`pdf-isearch-batch-mode'), which when activated inhibits isearch
from stopping at and highlighting every single match, but rather
display them batch-wise.  Here a batch means a number of matches
currently visible in the selected window.

The kind of highlighting is determined by three faces
`pdf-isearch-match' (for the current match), `pdf-isearch-lazy'
(for all other matches) and `pdf-isearch-batch' (when in batch
mode), which see.

Colors may also be influenced by the minor-mode
`pdf-view-dark-minor-mode'.  If this is minor mode enabled, each face's
dark colors, are used (see e.g. `frame-background-mode'), instead
of the light ones.

\\{pdf-isearch-minor-mode-map}
While in `isearch-mode' the following keys are available. Note
that not every isearch command work as expected.

\\{pdf-isearch-active-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Isearch minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-isearch-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-isearch" '("pdf-isearch-"))



(autoload 'pdf-links-minor-mode "pdf-links" "\
Handle links in PDF documents.\\<pdf-links-minor-mode-map>

If this mode is enabled, most links in the document may be
activated by clicking on them or by pressing \\[pdf-links-action-perform] and selecting
one of the displayed keys, or by using isearch limited to
links via \\[pdf-links-isearch-link].

\\{pdf-links-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Links minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-links-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-links-action-perform "pdf-links" "\
Follow LINK, depending on its type.

This may turn to another page, switch to another PDF buffer or
invoke `pdf-links-browse-uri-function'.

Interactively, link is read via `pdf-links-read-link-action'.
This function displays characters around the links in the current
page and starts reading characters (ignoring case).  After a
sufficient number of characters have been read, the corresponding
link's link is invoked.  Additionally, SPC may be used to
scroll the current page.

(fn LINK)" t)
(register-definition-prefixes "pdf-links" '("pdf-links-"))



(autoload 'pdf-loader-install "pdf-loader" "\
Prepare Emacs for using PDF Tools.

This function acts as a replacement for `pdf-tools-install' and
makes Emacs load and use PDF Tools as soon as a PDF file is
opened, but not sooner.

The arguments are passed verbatim to `pdf-tools-install', which
see.

(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)")
(register-definition-prefixes "pdf-loader" '("pdf-loader--"))



(register-definition-prefixes "pdf-macs" '("pdf-view-"))



(autoload 'pdf-misc-minor-mode "pdf-misc" "\
FIXME:  Not documented.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-misc-size-indication-minor-mode "pdf-misc" "\
Provide a working size indication in the mode-line.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc-Size-Indication minor mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-size-indication-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-misc-menu-bar-minor-mode "pdf-misc" "\
Display a PDF Tools menu in the menu-bar.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc-Menu-Bar minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-menu-bar-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-misc-context-menu-minor-mode "pdf-misc" "\
Provide a right-click context menu in PDF buffers.

\\{pdf-misc-context-menu-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc-Context-Menu minor mode' mode.  If the prefix argument
is positive, enable the mode, and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-context-menu-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-misc" '("pdf-misc-"))



(autoload 'pdf-occur "pdf-occur" "\
List lines matching STRING or PCRE.

Interactively search for a regexp. Unless a prefix arg was given,
in which case this functions performs a string search.

If `pdf-occur-prefer-string-search' is non-nil, the meaning of
the prefix-arg is inverted.

(fn STRING &optional REGEXP-P)" t)
(autoload 'pdf-occur-multi-command "pdf-occur" "\
Perform `pdf-occur' on multiple buffer.

For a programmatic search of multiple documents see
`pdf-occur-search'." t)
(defvar pdf-occur-global-minor-mode nil "\
Non-nil if Pdf-Occur-Global minor mode is enabled.
See the `pdf-occur-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-occur-global-minor-mode'.")
(custom-autoload 'pdf-occur-global-minor-mode "pdf-occur" nil)
(autoload 'pdf-occur-global-minor-mode "pdf-occur" "\
Enable integration of Pdf Occur with other modes.

This global minor mode enables (or disables)
`pdf-occur-ibuffer-minor-mode' and `pdf-occur-dired-minor-mode'
in all current and future ibuffer/dired buffer.

This is a global minor mode.  If called interactively, toggle the
`Pdf-Occur-Global minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pdf-occur-global-minor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-occur-ibuffer-minor-mode "pdf-occur" "\
Hack into ibuffer's do-occur binding.

This mode remaps `ibuffer-do-occur' to
`pdf-occur-ibuffer-do-occur', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `ibuffer-do-occur'.

This is a minor mode.  If called interactively, toggle the
`Pdf-Occur-Ibuffer minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-occur-ibuffer-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-occur-dired-minor-mode "pdf-occur" "\
Hack into dired's `dired-do-search' binding.

This mode remaps `dired-do-search' to
`pdf-occur-dired-do-search', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `dired-do-search'.

This is a minor mode.  If called interactively, toggle the
`Pdf-Occur-Dired minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-occur-dired-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-occur" '("pdf-occur-"))



(autoload 'pdf-outline-minor-mode "pdf-outline" "\
Display an outline of a PDF document.

This provides a PDF's outline on the menu bar via imenu.
Additionally the same outline may be viewed in a designated
buffer.

\\{pdf-outline-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Outline minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-outline-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-outline "pdf-outline" "\
Display an PDF outline of BUFFER.

BUFFER defaults to the current buffer.  Select the outline
buffer, unless NO-SELECT-WINDOW-P is non-nil.

(fn &optional BUFFER NO-SELECT-WINDOW-P)" t)
(autoload 'pdf-outline-imenu-enable "pdf-outline" "\
Enable imenu in the current PDF buffer." t)
(register-definition-prefixes "pdf-outline" '("pdf-outline"))



(autoload 'pdf-sync-minor-mode "pdf-sync" "\
Correlate a PDF position with the TeX file.

\\<pdf-sync-minor-mode-map>
This works via SyncTeX, which means the TeX sources need to have
been compiled with `--synctex=1'.  In AUCTeX this can be done by
setting `TeX-source-correlate-method' to `synctex' (before AUCTeX
is loaded) and enabling `TeX-source-correlate-mode'.

Then \\[pdf-sync-backward-search-mouse] in the PDF buffer will
open the corresponding TeX location.

If AUCTeX is your preferred tex-mode, this library arranges to
bind `pdf-sync-forward-display-pdf-key' (the default is `C-c C-g')
to `pdf-sync-forward-search' in `TeX-source-correlate-map'.  This
function displays the PDF page corresponding to the current
position in the TeX buffer.  This function only works together
with AUCTeX.

This is a minor mode.  If called interactively, toggle the
`Pdf-Sync minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-sync-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-sync" '("pdf-sync-"))



(defvar pdf-tools-handle-upgrades t "\
Whether PDF Tools should handle upgrading itself.")
(custom-autoload 'pdf-tools-handle-upgrades "pdf-tools" t)
(autoload 'pdf-tools-install "pdf-tools" "\
Install PDF-Tools in all current and future PDF buffers.

If the `pdf-info-epdfinfo-program' is not running or does not
appear to be working, attempt to rebuild it.  If this build
succeeded, continue with the activation of the package.
Otherwise fail silently, i.e. no error is signaled.

Build the program (if necessary) without asking first, if
NO-QUERY-P is non-nil.

Don't attempt to install system packages, if SKIP-DEPENDENCIES-P
is non-nil.

Do not signal an error in case the build failed, if NO-ERROR-P is
non-nil.

Attempt to install system packages (even if it is deemed
unnecessary), if FORCE-DEPENDENCIES-P is non-nil.

Note that SKIP-DEPENDENCIES-P and FORCE-DEPENDENCIES-P are
mutually exclusive.

Note further, that you can influence the installation directory
by setting `pdf-info-epdfinfo-program' to an appropriate
value (e.g. ~/bin/epdfinfo) before calling this function.

See `pdf-view-mode' and `pdf-tools-enabled-modes'.

(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" t)
(autoload 'pdf-tools-enable-minor-modes "pdf-tools" "\
Enable MODES in the current buffer.

MODES defaults to `pdf-tools-enabled-modes'.

(fn &optional MODES)" t)
(autoload 'pdf-tools-help "pdf-tools" "\
Show a Help buffer for `pdf-tools'." t)
(register-definition-prefixes "pdf-tools" '("pdf-tools-"))



(register-definition-prefixes "pdf-util" '("display-buffer-split-below-and-attach" "pdf-util-"))



(autoload 'pdf-view-bookmark-jump-handler "pdf-view" "\
The bookmark handler-function interface for bookmark BMK.

See also `pdf-view-bookmark-make-record'.

(fn BMK)")
(register-definition-prefixes "pdf-view" '("cua-copy-region--pdf-view-advice" "pdf-view-"))



(autoload 'pdf-virtual-edit-mode "pdf-virtual" "\
Major mode when editing a virtual PDF buffer.

(fn)" t)
(autoload 'pdf-virtual-view-mode "pdf-virtual" "\
Major mode in virtual PDF buffers.

(fn)" t)
(defvar pdf-virtual-global-minor-mode nil "\
Non-nil if Pdf-Virtual-Global minor mode is enabled.
See the `pdf-virtual-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-virtual-global-minor-mode'.")
(custom-autoload 'pdf-virtual-global-minor-mode "pdf-virtual" nil)
(autoload 'pdf-virtual-global-minor-mode "pdf-virtual" "\
Enable recognition and handling of VPDF files.

This is a global minor mode.  If called interactively, toggle the
`Pdf-Virtual-Global minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pdf-virtual-global-minor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-virtual-buffer-create "pdf-virtual" "\


(fn &optional FILENAMES BUFFER-NAME DISPLAY-P)" t)
(register-definition-prefixes "pdf-virtual" '("pdf-virtual-"))


(provide 'pdf-tools-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/mixed-pitch-1.1.1/mixed-pitch-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/mixed-pitch-1.1.1/mixed-pitch-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'mixed-pitch-mode "mixed-pitch" "\
Change the default face of the current buffer to a variable pitch, while keeping some faces fixed pitch.

See the variable `mixed-pitch-fixed-pitch-faces' for a list of
which faces remain fixed pitch. The height and pitch of faces is
inherited from `variable-pitch' and `default'.

This is a minor mode.  If called interactively, toggle the
`Mixed-Pitch mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `mixed-pitch-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "mixed-pitch" '("mixed-pitch-"))


(provide 'mixed-pitch-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dired-sidebar-0.2.0/dired-sidebar-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dired-sidebar-0.2.0/dired-sidebar-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'dired-sidebar-toggle-sidebar "dired-sidebar" "\
Toggle the project explorer window.
Optional argument DIR Use DIR as sidebar root if available.

With universal argument, use current directory.

(fn &optional DIR)" t)
(autoload 'dired-sidebar-toggle-with-current-directory "dired-sidebar" "\
Like `dired-sidebar-toggle-sidebar' but use current-directory." t)
(autoload 'dired-sidebar-show-sidebar "dired-sidebar" "\
Show sidebar displaying buffer B.

(fn &optional B)" t)
(autoload 'dired-sidebar-hide-sidebar "dired-sidebar" "\
Hide the sidebar in the selected frame." t)
(autoload 'dired-sidebar-jump-to-sidebar "dired-sidebar" "\
Jump to `dired-sidebar' buffer if it is showing.

If it's not showing, act as `dired-sidebar-toggle-sidebar'." t)
(register-definition-prefixes "dired-sidebar" '("dired-sidebar-"))


(provide 'dired-sidebar-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/kind-icon-0.1.9/kind-icon-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/kind-icon-0.1.9/kind-icon-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'kind-icon-margin-formatter "kind-icon" "\
Return a margin-formatter function which produces kind icons.
METADATA is the completion metadata supplied by the caller (see
info node `(elisp)Programmed Completion').  To use, add this
function to the relevant margin-formatters list.

(fn METADATA)")
(autoload 'kind-icon-enhance-completion "kind-icon" "\
A wrapper for completion-in-region-functions.
This wrapper sets a custom affixation-function which places an
icon in the prefix slot. Use it like:

  (setq completion-in-region-function 
     (kind-icon-enhance-completion 
       completion-in-region-function))

(fn COMPLETION-FUNCTION)")
(register-definition-prefixes "kind-icon" '("kind-icon-"))


(provide 'kind-icon-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/all-the-icons-dired-2.0/all-the-icons-dired-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/all-the-icons-dired-2.0/all-the-icons-dired-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'all-the-icons-dired-mode "all-the-icons-dired" "\
Display all-the-icons icon for each file in a dired buffer.

This is a minor mode.  If called interactively, toggle the
`All-The-Icons-Dired mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `all-the-icons-dired-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "all-the-icons-dired" '("all-the-icons-dired-"))


(provide 'all-the-icons-dired-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/org-superstar-1.5.1/org-superstar-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/org-superstar-1.5.1/org-superstar-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(put 'org-superstar-leading-bullet 'safe-local-variable #'char-or-string-p)
(autoload 'org-superstar-toggle-lightweight-lists "org-superstar" "\
Toggle syntax checking for plain list items.

Disabling syntax checking will cause Org Superstar to display
lines looking like plain lists (for example in code) like plain
lists.  However, this may cause significant speedup for org files
containing several hundred list items." t)
(autoload 'org-superstar-mode "org-superstar" "\
Use UTF8 bullets for headlines and plain lists.

This is a minor mode.  If called interactively, toggle the
`Org-Superstar mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `org-superstar-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "org-superstar" '("org-superstar-"))


(provide 'org-superstar-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/minions-0.3.7/minions-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/minions-0.3.7/minions-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(defvar minions-mode nil "\
Non-nil if Minions mode is enabled.
See the `minions-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `minions-mode'.")
(custom-autoload 'minions-mode "minions" nil)
(autoload 'minions-mode "minions" "\
Display a minor-mode menu in the mode line.

This replaces the likely incomplete and possibly cut off list of
minor-modes that is usually displayed directly in the mode line.

This is a global minor mode.  If called interactively, toggle the
`Minions mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='minions-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "minions" '("minions-"))


(provide 'minions-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/org-fancy-priorities-20210830.1657/org-fancy-priorities-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/org-fancy-priorities-20210830.1657/org-fancy-priorities-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'org-fancy-priorities-mode "org-fancy-priorities" "\
Customize the appearance of org-mode priorities.

This mode does not alter your files in any way, it
only changes the way that priorities are shown in your editor.

This is a minor mode.  If called interactively, toggle the
`Org-Fancy-Priorities mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `org-fancy-priorities-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "org-fancy-priorities" '("org-fancy-priorities-"))


(provide 'org-fancy-priorities-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/orderless-1.0/orderless-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/orderless-1.0/orderless-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'orderless-filter "orderless" "\
Split STRING into components and find entries TABLE matching all.
The predicate PRED is used to constrain the entries in TABLE.

(fn STRING TABLE &optional PRED)")
(autoload 'orderless-all-completions "orderless" "\
Split STRING into components and find entries TABLE matching all.
The predicate PRED is used to constrain the entries in TABLE.  The
matching portions of each candidate are highlighted.
This function is part of the `orderless' completion style.

(fn STRING TABLE PRED POINT)")
(autoload 'orderless-try-completion "orderless" "\
Complete STRING to unique matching entry in TABLE.
This uses `orderless-all-completions' to find matches for STRING
in TABLE among entries satisfying PRED.  If there is only one
match, it completes to that match.  If there are no matches, it
returns nil.  In any other case it \"completes\" STRING to
itself, without moving POINT.
This function is part of the `orderless' completion style.

(fn STRING TABLE PRED POINT)")
(add-to-list 'completion-styles-alist '(orderless orderless-try-completion orderless-all-completions "Completion of multiple components, in any order."))
(autoload 'orderless-ivy-re-builder "orderless" "\
Convert STR into regexps for use with ivy.
This function is for integration of orderless with ivy, use it as
a value in `ivy-re-builders-alist'.

(fn STR)")
(register-definition-prefixes "orderless" '("orderless-"))


(provide 'orderless-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/multi-vterm-20221031.610/multi-vterm-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/multi-vterm-20221031.610/multi-vterm-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'multi-vterm "multi-vterm" "\
Create new vterm buffer." t)
(autoload 'multi-vterm-project "multi-vterm" "\
Create new vterm buffer." t)
(autoload 'multi-vterm-dedicated-open "multi-vterm" "\
Open dedicated `multi-vterm' window." t)
(autoload 'multi-vterm-dedicated-close "multi-vterm" "\
Close dedicated `multi-vterm' window." t)
(autoload 'multi-vterm-dedicated-toggle "multi-vterm" "\
Toggle dedicated `multi-vterm' window." t)
(autoload 'multi-vterm-dedicated-select "multi-vterm" "\
Select the `multi-vterm' dedicated window." t)
(register-definition-prefixes "multi-vterm" '("multi-vterm-"))


(provide 'multi-vterm-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/doom-themes-2.3.0/doom-themes-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/doom-themes-2.3.0/doom-themes-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(register-definition-prefixes "doom-1337-theme" '("doom-1337"))



(register-definition-prefixes "doom-Iosvkem-theme" '("doom-Iosvkem"))



(register-definition-prefixes "doom-acario-dark-theme" '("doom-acario-dark"))



(register-definition-prefixes "doom-acario-light-theme" '("doom-acario-light"))



(register-definition-prefixes "doom-ayu-dark-theme" '("doom-ayu-dark"))



(register-definition-prefixes "doom-ayu-light-theme" '("doom-ayu-light"))



(register-definition-prefixes "doom-ayu-mirage-theme" '("doom-ayu-mirage"))



(register-definition-prefixes "doom-badger-theme" '("doom-badger"))



(register-definition-prefixes "doom-challenger-deep-theme" '("doom-challenger-deep"))



(register-definition-prefixes "doom-city-lights-theme" '("doom-city-lights"))



(register-definition-prefixes "doom-dark+-theme" '("doom-dark+"))



(register-definition-prefixes "doom-dracula-theme" '("doom-dracula"))



(register-definition-prefixes "doom-earl-grey-theme" '("doom-earl-grey"))



(register-definition-prefixes "doom-ephemeral-theme" '(":group" "doom-ephemeral"))



(register-definition-prefixes "doom-fairy-floss-theme" '("doom-fairy-floss"))



(register-definition-prefixes "doom-flatwhite-theme" '("doom-f"))



(register-definition-prefixes "doom-gruvbox-light-theme" '("doom-gruvbox-light"))



(register-definition-prefixes "doom-gruvbox-theme" '("doom-gruvbox"))



(register-definition-prefixes "doom-henna-theme" '("doom-henna"))



(register-definition-prefixes "doom-homage-black-theme" '("doom-homage-black"))



(register-definition-prefixes "doom-homage-white-theme" '("doom-homage-white"))



(register-definition-prefixes "doom-horizon-theme" '("doom-horizon"))



(register-definition-prefixes "doom-ir-black-theme" '("doom-ir-black"))



(register-definition-prefixes "doom-lantern-theme" '("doom-lantern"))



(register-definition-prefixes "doom-laserwave-theme" '("doom-laserwave"))



(register-definition-prefixes "doom-manegarm-theme" '("doom-manegarm"))



(register-definition-prefixes "doom-material-dark-theme" '("doom-material-"))



(register-definition-prefixes "doom-material-theme" '("doom-material"))



(register-definition-prefixes "doom-meltbus-theme" '("doom-meltbus"))



(register-definition-prefixes "doom-miramare-theme" '("doom-miramare"))



(register-definition-prefixes "doom-molokai-theme" '("doom-molokai"))



(register-definition-prefixes "doom-monokai-classic-theme" '("doom-monokai-classic"))



(register-definition-prefixes "doom-monokai-machine-theme" '("doom-monokai-machine"))



(register-definition-prefixes "doom-monokai-octagon-theme" '("doom-monokai-octagon"))



(register-definition-prefixes "doom-monokai-pro-theme" '("doom-monokai-pro"))



(register-definition-prefixes "doom-monokai-ristretto-theme" '("doom-monokai-ristretto"))



(register-definition-prefixes "doom-monokai-spectrum-theme" '("doom-monokai-spectrum"))



(register-definition-prefixes "doom-moonlight-theme" '("doom-moonlight"))



(register-definition-prefixes "doom-nord-aurora-theme" '(":group" "doom-nord-aurora"))



(register-definition-prefixes "doom-nord-light-theme" '(":group" "doom-nord-light"))



(register-definition-prefixes "doom-nord-theme" '(":group" "doom-nord"))



(register-definition-prefixes "doom-nova-theme" '("doom-nova"))



(register-definition-prefixes "doom-oceanic-next-theme" '("doom-oceanic-next"))



(register-definition-prefixes "doom-old-hope-theme" '("doom-old-hope"))



(register-definition-prefixes "doom-one-light-theme" '("doom-one-light"))



(register-definition-prefixes "doom-one-theme" '("doom-one"))



(register-definition-prefixes "doom-opera-light-theme" '(":group" "doom-opera-light"))



(register-definition-prefixes "doom-opera-theme" '(":group" "doom-opera"))



(register-definition-prefixes "doom-outrun-electric-theme" '("doom-outrun-electric"))



(register-definition-prefixes "doom-palenight-theme" '("doom-palenight"))



(register-definition-prefixes "doom-peacock-theme" '("doom-peacock"))



(register-definition-prefixes "doom-plain-dark-theme" '("doom-plain-"))



(register-definition-prefixes "doom-plain-theme" '("doom-plain"))



(register-definition-prefixes "doom-rouge-theme" '("doom-rouge"))



(register-definition-prefixes "doom-shades-of-purple-theme" '("doom-shades-of-purple"))



(register-definition-prefixes "doom-snazzy-theme" '("doom-snazzy"))



(register-definition-prefixes "doom-solarized-dark-high-contrast-theme" '("doom-solarized-dark-high-contrast"))



(register-definition-prefixes "doom-solarized-dark-theme" '("doom-solarized-dark"))



(register-definition-prefixes "doom-solarized-light-theme" '("doom-solarized-light"))



(register-definition-prefixes "doom-sourcerer-theme" '("doom-sourcerer"))



(register-definition-prefixes "doom-spacegrey-theme" '("doom-spacegrey"))



(autoload 'doom-name-to-rgb "doom-themes" "\
Retrieves the hexidecimal string repesented the named COLOR (e.g. \"red\")
for FRAME (defaults to the current frame).

(fn COLOR)")
(autoload 'doom-blend "doom-themes" "\
Blend two colors (hexidecimal strings) together by a coefficient ALPHA (a
float between 0 and 1)

(fn COLOR1 COLOR2 ALPHA)")
(autoload 'doom-darken "doom-themes" "\
Darken a COLOR (a hexidecimal string) by a coefficient ALPHA (a float between
0 and 1).

(fn COLOR ALPHA)")
(autoload 'doom-lighten "doom-themes" "\
Brighten a COLOR (a hexidecimal string) by a coefficient ALPHA (a float
between 0 and 1).

(fn COLOR ALPHA)")
(autoload 'doom-color "doom-themes" "\
Retrieve a specific color named NAME (a symbol) from the current theme.

(fn NAME &optional TYPE)")
(autoload 'doom-ref "doom-themes" "\
TODO

(fn FACE PROP &optional CLASS)")
(autoload 'doom-themes-set-faces "doom-themes" "\
Customize THEME (a symbol) with FACES.

If THEME is nil, it applies to all themes you load. FACES is a list of Doom
theme face specs. These is a simplified spec. For example:

  (doom-themes-set-faces 'user
    '(default :background red :foreground blue)
    '(doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
    '(doom-modeline-buffer-file :inherit 'mode-line-buffer-id :weight 'bold)
    '(doom-modeline-buffer-path :inherit 'mode-line-emphasis :weight 'bold)
    '(doom-modeline-buffer-project-root :foreground green :weight 'bold))

(fn THEME &rest FACES)")
(function-put 'doom-themes-set-faces 'lisp-indent-function 'defun)
(when (and (boundp 'custom-theme-load-path) load-file-name) (let* ((base (file-name-directory load-file-name)) (dir (expand-file-name "themes/" base))) (add-to-list 'custom-theme-load-path (or (and (file-directory-p dir) dir) base))))
(register-definition-prefixes "doom-themes" '("def-doom-theme" "doom-"))



(register-definition-prefixes "doom-themes-base" '("doom-themes-base-"))



(autoload 'doom-themes-neotree-config "doom-themes-ext-neotree" "\
Install doom-themes' neotree configuration.

Includes an Atom-esque icon theme and highlighting based on filetype.")
(register-definition-prefixes "doom-themes-ext-neotree" '("doom-"))



(autoload 'doom-themes-org-config "doom-themes-ext-org" "\
Load `doom-themes-ext-org'.")
(register-definition-prefixes "doom-themes-ext-org" '("doom-themes-"))



(autoload 'doom-themes-treemacs-config "doom-themes-ext-treemacs" "\
Install doom-themes' treemacs configuration.

Includes an Atom-esque icon theme and highlighting based on filetype.")
(register-definition-prefixes "doom-themes-ext-treemacs" '("doom-themes-"))



(autoload 'doom-themes-visual-bell-fn "doom-themes-ext-visual-bell" "\
Blink the mode-line red briefly. Set `ring-bell-function' to this to use it.")
(autoload 'doom-themes-visual-bell-config "doom-themes-ext-visual-bell" "\
Enable flashing the mode-line on error.")



(register-definition-prefixes "doom-tokyo-night-theme" '("doom-tokyo-night"))



(register-definition-prefixes "doom-tomorrow-day-theme" '("doom-tomorrow-day"))



(register-definition-prefixes "doom-tomorrow-night-theme" '("doom-tomorrow-night"))



(register-definition-prefixes "doom-vibrant-theme" '("doom-vibrant"))



(register-definition-prefixes "doom-wilmersdorf-theme" '("doom-wilmersdorf"))



(register-definition-prefixes "doom-xcode-theme" '("doom-xcode"))



(register-definition-prefixes "doom-zenburn-theme" '("doom-zenburn"))


(provide 'doom-themes-autoloads)


)
(let ((load-true-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dired-git-info-0.3.1/dired-git-info-autoloads.el")(load-file-name "/home/k8x1d/.emacs-29-pgtk.d/elpa/dired-git-info-0.3.1/dired-git-info-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))




(autoload 'dired-git-info-mode "dired-git-info" "\
Toggle git message info in current dired buffer.

This is a minor mode.  If called interactively, toggle the
`Dired-Git-Info mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `dired-git-info-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'dired-git-info-auto-enable "dired-git-info" "\
Enable `dired-git-info-mode' if current dired buffer is in a git repo.

Add this function to `dired-after-readin-hook' to enable the mode
automatically inside git repos.")
(register-definition-prefixes "dired-git-info" '("dgi-"))


(provide 'dired-git-info-autoloads)


)
(defvar package-activated-list)
(setq package-activated-list
      (delete-dups
       (append
	'(gntp log4e alert org-pomodoro async dash s f hl-todo transient with-editor git-commit magit-section magit pcre2el magit-todos annalist vterm all-the-icons cape which-key evil hide-mode-line all-the-icons-ibuffer evil-collection svg-lib dired-hacks-utils dired-subtree corfu org-appear compat shrink-path doom-modeline evil-org emacsql emacsql-sqlite closql treepy ghub markdown-mode yaml forge vertico tablist pdf-tools mixed-pitch dired-sidebar kind-icon all-the-icons-dired org-superstar minions org-fancy-priorities orderless multi-vterm doom-themes dired-git-info)
	package-activated-list)))
(progn
  (require 'info)
  (info-initialize)
  (setq Info-directory-list
	(append
	 '("/home/k8x1d/.emacs-29-pgtk.d/elpa/orderless-1.0" "/home/k8x1d/.emacs-29-pgtk.d/elpa/vertico-1.0" "/home/k8x1d/.emacs-29-pgtk.d/elpa/forge-0.3.2" "/home/k8x1d/.emacs-29-pgtk.d/elpa/ghub-3.5.6" "/home/k8x1d/.emacs-29-pgtk.d/elpa/compat-29.1.3.2" "/home/k8x1d/.emacs-29-pgtk.d/elpa/corfu-0.34" "/home/k8x1d/.emacs-29-pgtk.d/elpa/evil-1.15.0" "/home/k8x1d/.emacs-29-pgtk.d/elpa/cape-0.12" "/home/k8x1d/.emacs-29-pgtk.d/elpa/annalist-1.0.1" "/home/k8x1d/.emacs-29-pgtk.d/elpa/magit-3.3.0" "/home/k8x1d/.emacs-29-pgtk.d/elpa/magit-section-3.3.0" "/home/k8x1d/.emacs-29-pgtk.d/elpa/with-editor-3.2.0" "/home/k8x1d/.emacs-29-pgtk.d/elpa/transient-0.3.7" "/home/k8x1d/.emacs-29-pgtk.d/elpa/dash-2.19.1")
	 Info-directory-list)))

;; Local Variables:
;; version-control: never
;; no-update-autoloads: t
;; byte-compile-warnings: (not make-local)
;; End:
